{
  "reportTitle": "meteor-wapi",
  "stats": {
    "suites": 19,
    "tests": 39,
    "passes": 39,
    "pending": 0,
    "failures": 0,
    "start": "2015-05-01T21:13:49.927Z",
    "end": "2015-05-01T21:13:50.794Z",
    "duration": 867,
    "testsRegistered": 39,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Unit suite - The `errorHandler` function",
        "suites": [],
        "tests": [
          {
            "title": "should send the custom error if it's an instance of MWError",
            "fullTitle": "Unit suite - The `errorHandler` function should send the custom error if it's an instance of MWError",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> res = getResponse();\nerrorHandler(res, <span class=\"hljs-keyword\">new</span> MWError(<span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">\"Message\"</span>));\nres.status.calledWith(<span class=\"hljs-number\">400</span>).should.equal(<span class=\"hljs-literal\">true</span>);\nres.send.calledWith({error: <span class=\"hljs-string\">\"Message\"</span>}).should.equal(<span class=\"hljs-literal\">true</span>);",
            "isRoot": false,
            "uuid": "c4cda6e5-2fd6-4d25-99bd-c4ef53328ca8",
            "parentUUID": "99064b0c-6b14-4c08-9c93-aac780568449",
            "skipped": false
          },
          {
            "title": "should send a 500 if the error is not an instance of MWError",
            "fullTitle": "Unit suite - The `errorHandler` function should send a 500 if the error is not an instance of MWError",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> res = getResponse();\nerrorHandler(res, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">\"Message\"</span>));\nres.status.calledWith(<span class=\"hljs-number\">500</span>).should.equal(<span class=\"hljs-literal\">true</span>);\nres.send.calledWith({error: <span class=\"hljs-string\">\"Internal server error\"</span>}).should.equal(<span class=\"hljs-literal\">true</span>);",
            "isRoot": false,
            "uuid": "dbbe1ef6-3694-4223-8f95-127682356fb1",
            "parentUUID": "99064b0c-6b14-4c08-9c93-aac780568449",
            "skipped": false
          },
          {
            "title": "should log an error if the error is not an instance of MWError",
            "fullTitle": "Unit suite - The `errorHandler` function should log an error if the error is not an instance of MWError",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> error = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">\"Message\"</span>);\n<span class=\"hljs-keyword\">var</span> res = getResponse();\nerrorHandler(res, error);\n<span class=\"hljs-built_in\">console</span>.error.calledWith(error).should.equal(<span class=\"hljs-literal\">true</span>);",
            "isRoot": false,
            "uuid": "d4662db8-238b-46a2-9cfb-ff4238272eb0",
            "parentUUID": "99064b0c-6b14-4c08-9c93-aac780568449",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/lib/error-handler.js",
        "uuid": "99064b0c-6b14-4c08-9c93-aac780568449",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi/test/unit/lib/error-handler.js",
        "passes": [
          "[Circular ~.suites.suites.0.tests.0]",
          "[Circular ~.suites.suites.0.tests.1]",
          "[Circular ~.suites.suites.0.tests.2]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 3,
        "totalPasses": 3,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 4
      },
      {
        "title": "Unit suite - The `getLastValidDate` function",
        "suites": [],
        "tests": [
          {
            "title": "should get the last valid date from now",
            "fullTitle": "Unit suite - The `getLastValidDate` function should get the last valid date from now",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> EIGHTYNINE_DAYS_AGO_IN_MS = <span class=\"hljs-built_in\">Date</span>.now() - (<span class=\"hljs-number\">89</span> * <span class=\"hljs-number\">24</span> * <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">1000</span>);\n<span class=\"hljs-keyword\">var</span> ret = getLastValidDate();\n(ret.getTime() &lt; EIGHTYNINE_DAYS_AGO_IN_MS).should.equal(<span class=\"hljs-literal\">true</span>);",
            "isRoot": false,
            "uuid": "2c7bcb54-41a9-451a-a441-ba0c3e572f5b",
            "parentUUID": "c323325a-1b71-449d-bfa8-a8afa4b1a495",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/lib/get-last-valid-date.js",
        "uuid": "c323325a-1b71-449d-bfa8-a8afa4b1a495",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi/test/unit/lib/get-last-valid-date.js",
        "passes": [
          "[Circular ~.suites.suites.1.tests.0]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Unit suite - The `getUserFromToken` function",
        "suites": [],
        "tests": [
          {
            "title": "should return a thenable",
            "fullTitle": "Unit suite - The `getUserFromToken` function should return a thenable",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> mwInstance = {\n    db: {\n        collection: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n            <span class=\"hljs-keyword\">return</span> {\n                findOne: R.always(<span class=\"hljs-literal\">null</span>)\n            };\n        }\n    }\n};\n<span class=\"hljs-keyword\">var</span> ret = getUserFromToken(mwInstance, <span class=\"hljs-string\">\"loginToken\"</span>);\nret.then.should.be.of.type(<span class=\"hljs-string\">\"function\"</span>);",
            "isRoot": false,
            "uuid": "71dc93a4-cb3b-4300-9d32-d1692034e99d",
            "parentUUID": "2dcdb20b-aba8-42cb-a0d1-f36705746b54",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/lib/get-user-from-token.js",
        "uuid": "2dcdb20b-aba8-42cb-a0d1-f36705746b54",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi/test/unit/lib/get-user-from-token.js",
        "passes": [
          "[Circular ~.suites.suites.2.tests.0]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 2
      },
      {
        "title": "Unit suite - The `hashLoginToken` function",
        "suites": [],
        "tests": [
          {
            "title": "should hash with sha256 the passed in string and return it as a base64 string",
            "fullTitle": "Unit suite - The `hashLoginToken` function should hash with sha256 the passed in string and return it as a base64 string",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> ret = hashLoginToken(<span class=\"hljs-string\">\"hello\"</span>);\nret.should.equal(<span class=\"hljs-string\">\"LPJNul+wow4m6DsqxbninhsWHlwfp0JecwQzYpOLmCQ=\"</span>);",
            "isRoot": false,
            "uuid": "24854d7f-c613-4aea-91c7-713f605b1069",
            "parentUUID": "ad7d3aad-5cf9-4d76-a04d-9e794a637496",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/lib/hash-login-token.js",
        "uuid": "ad7d3aad-5cf9-4d76-a04d-9e794a637496",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi/test/unit/lib/hash-login-token.js",
        "passes": [
          "[Circular ~.suites.suites.3.tests.0]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Unit suite - The `resultHandler` function",
        "suites": [],
        "tests": [
          {
            "title": "should send the provided response with a 200 HTTP code",
            "fullTitle": "Unit suite - The `resultHandler` function should send the provided response with a 200 HTTP code",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> res_0 = getResponse();\n        resultHandler(res_0, {});\n        res_0.status.calledWith(<span class=\"hljs-number\">200</span>).should.equal(<span class=\"hljs-literal\">true</span>);\n        res_0.send.calledWith({result: {}}).should.equal(<span class=\"hljs-literal\">true</span>);\n        <span class=\"hljs-keyword\">var</span> res_1 = getResponse();\n        resultHandler(res_1, <span class=\"hljs-literal\">undefined</span>);\n        res_1.status.calledWith(<span class=\"hljs-number\">200</span>).should.equal(<span class=\"hljs-literal\">true</span>);\n        res_1.send.calledWith({result: <span class=\"hljs-literal\">null</span>}).should.equal(<span class=\"hljs-literal\">true</span>);",
            "isRoot": false,
            "uuid": "f19eedbc-cc18-471b-9545-dc58da4d1f5e",
            "parentUUID": "cfea5496-72f2-4fac-b615-ed38ea9b6e73",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/lib/result-handler.js",
        "uuid": "cfea5496-72f2-4fac-b615-ed38ea9b6e73",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi/test/unit/lib/result-handler.js",
        "passes": [
          "[Circular ~.suites.suites.4.tests.0]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 1
      },
      {
        "title": "Unit suite - The `_runMethod` method",
        "suites": [],
        "tests": [
          {
            "title": "should return a thenable",
            "fullTitle": "Unit suite - The `_runMethod` method should return a thenable",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> ret = methods._runMethod({}, <span class=\"hljs-string\">\"\"</span>, []);\nret.catch(R.identity);\nret.then.should.be.of.type(<span class=\"hljs-string\">\"function\"</span>);",
            "isRoot": false,
            "uuid": "9f7a34c4-4b4a-408f-afed-5aaaef3019f6",
            "parentUUID": "86b5c403-e0ff-4d50-8559-7f5ba4fd9c20",
            "skipped": false
          },
          {
            "title": "should actually call the method",
            "fullTitle": "Unit suite - The `_runMethod` method should actually call the method",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    _methods: {\n        method: {\n            fn: sinon.spy(),\n            context: {}\n        }\n    }\n};\nmethods._runMethod.call(ctx, {}, <span class=\"hljs-string\">\"method\"</span>, [])\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">try</span> {\n            ctx._methods.method.fn.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        } <span class=\"hljs-keyword\">catch</span> (e) {\n            <span class=\"hljs-keyword\">return</span> done(e);\n        }\n        done();\n    })\n    .catch(done);",
            "isRoot": false,
            "uuid": "3f089bc3-72ed-4eb2-a888-542799f8260f",
            "parentUUID": "86b5c403-e0ff-4d50-8559-7f5ba4fd9c20",
            "skipped": false
          },
          {
            "title": "should call the method with the additional context we provide when registering it",
            "fullTitle": "Unit suite - The `_runMethod` method should call the method with the additional context we provide when registering it",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    _methods: {\n        method: {\n            fn: sinon.spy(),\n            context: {\n                prop: <span class=\"hljs-string\">\"value\"</span>\n            }\n        }\n    }\n};\nmethods._runMethod.call(ctx, {userId: <span class=\"hljs-literal\">null</span>}, <span class=\"hljs-string\">\"method\"</span>, [])\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">try</span> {\n            ctx._methods.method.fn.firstCall.thisValue.should.eql({\n                userId: <span class=\"hljs-literal\">null</span>,\n                prop: <span class=\"hljs-string\">\"value\"</span>\n            });\n        } <span class=\"hljs-keyword\">catch</span> (e) {\n            <span class=\"hljs-keyword\">return</span> done(e);\n        }\n        done();\n    })\n    .catch(done);",
            "isRoot": false,
            "uuid": "b35326f1-a790-4e06-b673-7c803f27111f",
            "parentUUID": "86b5c403-e0ff-4d50-8559-7f5ba4fd9c20",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/methods/_runMethod.js",
        "uuid": "86b5c403-e0ff-4d50-8559-7f5ba4fd9c20",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi/test/unit/methods/_runMethod.js",
        "passes": [
          "[Circular ~.suites.suites.5.tests.0]",
          "[Circular ~.suites.suites.5.tests.1]",
          "[Circular ~.suites.suites.5.tests.2]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 3,
        "totalPasses": 3,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 5
      },
      {
        "title": "Unit suite - The promise returned by `_runMethod`",
        "suites": [],
        "tests": [
          {
            "title": "should be rejected if the method does not exist",
            "fullTitle": "Unit suite - The promise returned by `_runMethod` should be rejected if the method does not exist",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    _methods: {}\n};\nmethods._runMethod.call(ctx, {}, <span class=\"hljs-string\">\"method\"</span>, [])\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        done(<span class=\"hljs-string\">\"The promise should have been rejected\"</span>);\n    })\n    .catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(err)</span> </span>{\n        <span class=\"hljs-keyword\">try</span> {\n            err.code.should.equal(<span class=\"hljs-number\">404</span>);\n            err.message.should.equal(<span class=\"hljs-string\">\"Method not found\"</span>);\n        } <span class=\"hljs-keyword\">catch</span> (e) {\n            <span class=\"hljs-keyword\">return</span> done(e);\n        }\n        done();\n    });",
            "isRoot": false,
            "uuid": "47194b00-9e4f-4edf-9096-38b379b9af8f",
            "parentUUID": "1dcaa722-084c-4e96-8b21-0cf3a70281e0",
            "skipped": false
          },
          {
            "title": "should be rejected if the method throws",
            "fullTitle": "Unit suite - The promise returned by `_runMethod` should be rejected if the method throws",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> error = {};\n<span class=\"hljs-keyword\">var</span> ctx = {\n    _methods: {\n        method: {\n            fn: sinon.stub().throws(error),\n            context: {}\n        }\n    }\n};\nmethods._runMethod.call(ctx, {}, <span class=\"hljs-string\">\"method\"</span>, [])\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        done(<span class=\"hljs-string\">\"The promise should have been rejected\"</span>);\n    })\n    .catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(err)</span> </span>{\n        <span class=\"hljs-keyword\">try</span> {\n            err.should.equal(error);\n        } <span class=\"hljs-keyword\">catch</span> (e) {\n            <span class=\"hljs-keyword\">return</span> done(e);\n        }\n        done();\n    });",
            "isRoot": false,
            "uuid": "477780c8-bf44-474e-a0e5-2bdf675514bc",
            "parentUUID": "1dcaa722-084c-4e96-8b21-0cf3a70281e0",
            "skipped": false
          },
          {
            "title": "should be resolved with the value returned by the method",
            "fullTitle": "Unit suite - The promise returned by `_runMethod` should be resolved with the value returned by the method",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> value = {};\n<span class=\"hljs-keyword\">var</span> ctx = {\n    _methods: {\n        method: {\n            fn: sinon.stub().returns(value),\n            context: {}\n        }\n    }\n};\nmethods._runMethod.call(ctx, {}, <span class=\"hljs-string\">\"method\"</span>, [])\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(val)</span> </span>{\n        <span class=\"hljs-keyword\">try</span> {\n            val.should.equal(value);\n        } <span class=\"hljs-keyword\">catch</span> (e) {\n            <span class=\"hljs-keyword\">return</span> done(e);\n        }\n        done();\n    })\n    .catch(done);",
            "isRoot": false,
            "uuid": "c778fd85-cca9-44f4-8da8-b4e6ddeb989c",
            "parentUUID": "1dcaa722-084c-4e96-8b21-0cf3a70281e0",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/methods/_runMethod.js",
        "uuid": "1dcaa722-084c-4e96-8b21-0cf3a70281e0",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi/test/unit/methods/_runMethod.js",
        "passes": [
          "[Circular ~.suites.suites.6.tests.0]",
          "[Circular ~.suites.suites.6.tests.1]",
          "[Circular ~.suites.suites.6.tests.2]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 3,
        "totalPasses": 3,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 2
      },
      {
        "title": "Unit suite - The `getRouter` method",
        "suites": [],
        "tests": [
          {
            "title": "should return an express.Router",
            "fullTitle": "Unit suite - The `getRouter` method should return an express.Router",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-comment\">/*\n*   express routers are not instances of any class, therefore we can't\n*   use `instanceOf` for this test. Instead we test it against the\n*   current implementation, where a router is a function which has,\n*   according to its API, a `use` property (which is a function too).\n*/</span>\n<span class=\"hljs-keyword\">var</span> router = methods.getRouter();\nrouter.should.be.of.type(<span class=\"hljs-string\">\"function\"</span>);\nrouter.use.should.be.of.type(<span class=\"hljs-string\">\"function\"</span>);",
            "isRoot": false,
            "uuid": "10a65771-6c9c-4c8a-b945-76885e1bcd0c",
            "parentUUID": "dd6cc818-b27b-4581-ab19-f7d4aae2a02f",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/methods/getRouter.js",
        "uuid": "dd6cc818-b27b-4581-ab19-f7d4aae2a02f",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi/test/unit/methods/getRouter.js",
        "passes": [
          "[Circular ~.suites.suites.7.tests.0]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 17
      },
      {
        "title": "Unit suite - The function returned by `getRouter`",
        "suites": [],
        "tests": [
          {
            "title": "should call the `_runMethod` method",
            "fullTitle": "Unit suite - The function returned by `getRouter` should call the `_runMethod` method",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    _runMethod: sinon.spy(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> BPromise(R.identity);\n    })\n};\n<span class=\"hljs-keyword\">var</span> route = methods.getRouter.call(ctx);\n<span class=\"hljs-comment\">/*\n*   Mock the request \"only as much as needed\" to make it pass through\n*   the router. We accept this poor compromise since this part is also\n*   thoroughly tested with integration tests.\n*/</span>\n<span class=\"hljs-keyword\">var</span> req = {\n    url: <span class=\"hljs-string\">\"/\"</span>,\n    method: <span class=\"hljs-string\">\"POST\"</span>,\n    context: {},\n    <span class=\"hljs-comment\">/*\n    *   If the bodyParser middleware finds a _body property on the\n    *   request, it lets it through.\n    */</span>\n    _body: <span class=\"hljs-string\">\"notUndefined\"</span>,\n    body: {\n        method: <span class=\"hljs-string\">\"method\"</span>,\n        params: []\n    }\n};\n<span class=\"hljs-keyword\">var</span> res = {};\n<span class=\"hljs-keyword\">var</span> next = R.identity;\nroute(req, res, next);\nctx._runMethod.calledWith(req.context, req.body.method, req.body.params).should.equal(<span class=\"hljs-literal\">true</span>);",
            "isRoot": false,
            "uuid": "bbbca0a6-bc0e-4578-9335-bdeb9bb1431a",
            "parentUUID": "0741a1b3-4fab-4338-95d8-55803fd11f72",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/methods/getRouter.js",
        "uuid": "0741a1b3-4fab-4338-95d8-55803fd11f72",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi/test/unit/methods/getRouter.js",
        "passes": [
          "[Circular ~.suites.suites.8.tests.0]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 3
      },
      {
        "title": "Unit suite - The `methods` method",
        "suites": [],
        "tests": [
          {
            "title": "should register methods",
            "fullTitle": "Unit suite - The `methods` method should register methods",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    _methods: {}\n};\n<span class=\"hljs-keyword\">var</span> optionalContext = {};\nmethods.methods.call(ctx, {\n    name: R.identity\n}, optionalContext);\nctx._methods.name.fn.should.equal(R.identity);\nctx._methods.name.context.should.equal(optionalContext);",
            "isRoot": false,
            "uuid": "0011b40e-9832-408e-af49-eba591df32b4",
            "parentUUID": "cb26a5db-737d-4f86-8d3a-bf571966f812",
            "skipped": false
          },
          {
            "title": "should type-check its arguments (throwing in case of mismatches)",
            "fullTitle": "Unit suite - The `methods` method should type-check its arguments (throwing in case of mismatches)",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    _methods: {}\n};\n<span class=\"hljs-keyword\">var</span> troublemaker_0 = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n    methods.methods.call(ctx, {\n        name: <span class=\"hljs-string\">\"notAFunction\"</span>\n    });\n};\ntroublemaker_0.should.throw();\n<span class=\"hljs-keyword\">var</span> troublemaker_1 = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n    methods.methods.call(ctx, {\n        name: R.identity\n    }, <span class=\"hljs-string\">\"notAnObject\"</span>);\n};\ntroublemaker_1.should.throw();",
            "isRoot": false,
            "uuid": "2d6c2147-922c-41c7-a8a4-7fae4c3c86eb",
            "parentUUID": "cb26a5db-737d-4f86-8d3a-bf571966f812",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/methods/methods.js",
        "uuid": "cb26a5db-737d-4f86-8d3a-bf571966f812",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi/test/unit/methods/methods.js",
        "passes": [
          "[Circular ~.suites.suites.9.tests.0]",
          "[Circular ~.suites.suites.9.tests.1]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 2,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 2
      },
      {
        "title": "Unit suite - The `bodyValidation` middleware getter",
        "suites": [],
        "tests": [
          {
            "title": "should return a middleware function",
            "fullTitle": "Unit suite - The `bodyValidation` middleware getter should return a middleware function",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> bodyValidationMiddleware = middleware.bodyValidation();\nbodyValidationMiddleware.should.be.of.type(<span class=\"hljs-string\">\"function\"</span>);\nbodyValidationMiddleware.length.should.equal(<span class=\"hljs-number\">3</span>);",
            "isRoot": false,
            "uuid": "9b62330f-24f8-43a1-a33e-d83e95d2553d",
            "parentUUID": "32d89507-85ee-4240-811e-524876991191",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/middleware/bodyValidation.js",
        "uuid": "32d89507-85ee-4240-811e-524876991191",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi/test/unit/middleware/bodyValidation.js",
        "passes": [
          "[Circular ~.suites.suites.10.tests.0]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Unit suite - The middleware function returned by the `bodyValidation` middleware getter",
        "suites": [],
        "tests": [
          {
            "title": "should stop the request with an error if the body is malformed",
            "fullTitle": "Unit suite - The middleware function returned by the `bodyValidation` middleware getter should stop the request with an error if the body is malformed",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> req = {\n    body: <span class=\"hljs-string\">\"malformed body\"</span>\n};\n<span class=\"hljs-keyword\">var</span> res = {\n    status: sinon.spy(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> res;\n    }),\n    send: sinon.spy()\n};\n<span class=\"hljs-keyword\">var</span> next = sinon.spy();\n<span class=\"hljs-keyword\">var</span> bodyValidationMiddleware = middleware.bodyValidation();\nbodyValidationMiddleware(req, res, next);\nres.status.called.should.equal(<span class=\"hljs-literal\">true</span>);\nres.send.called.should.equal(<span class=\"hljs-literal\">true</span>);",
            "isRoot": false,
            "uuid": "7bc70931-1f20-47a8-be0d-bf938d6066e4",
            "parentUUID": "4e52d0a9-c818-4fe8-b6d8-c93360364376",
            "skipped": false
          },
          {
            "title": "should let the request through if the body is well-formed",
            "fullTitle": "Unit suite - The middleware function returned by the `bodyValidation` middleware getter should let the request through if the body is well-formed",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> req = {\n    body: {\n        method: <span class=\"hljs-string\">\"method\"</span>,\n        params: []\n    }\n};\n<span class=\"hljs-keyword\">var</span> res = {};\n<span class=\"hljs-keyword\">var</span> next = sinon.spy();\n<span class=\"hljs-keyword\">var</span> bodyValidationMiddleware = middleware.bodyValidation();\nbodyValidationMiddleware(req, res, next);\nnext.called.should.equal(<span class=\"hljs-literal\">true</span>);",
            "isRoot": false,
            "uuid": "4df17930-0b7f-4428-a1d3-6e90b3a47f2e",
            "parentUUID": "4e52d0a9-c818-4fe8-b6d8-c93360364376",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/middleware/bodyValidation.js",
        "uuid": "4e52d0a9-c818-4fe8-b6d8-c93360364376",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi/test/unit/middleware/bodyValidation.js",
        "passes": [
          "[Circular ~.suites.suites.11.tests.0]",
          "[Circular ~.suites.suites.11.tests.1]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 2,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 2
      },
      {
        "title": "Unit suite - The `context` middleware getter",
        "suites": [],
        "tests": [
          {
            "title": "should return a middleware function",
            "fullTitle": "Unit suite - The `context` middleware getter should return a middleware function",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> contextMiddleware = middleware.context();\ncontextMiddleware.should.be.of.type(<span class=\"hljs-string\">\"function\"</span>);\ncontextMiddleware.length.should.equal(<span class=\"hljs-number\">3</span>);",
            "isRoot": false,
            "uuid": "9dcaef1b-7388-4c9d-b619-f7d15f1e98ed",
            "parentUUID": "ccb44edc-9444-4e0a-b1c6-20fe483595f4",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/middleware/context.js",
        "uuid": "ccb44edc-9444-4e0a-b1c6-20fe483595f4",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi/test/unit/middleware/context.js",
        "passes": [
          "[Circular ~.suites.suites.12.tests.0]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Unit suite - The middleware function returned by the `context` middleware getter",
        "suites": [],
        "tests": [
          {
            "title": "should attach a default context to the request",
            "fullTitle": "Unit suite - The middleware function returned by the `context` middleware getter should attach a default context to the request",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> req = {};\n<span class=\"hljs-keyword\">var</span> res = {};\n<span class=\"hljs-keyword\">var</span> next = sinon.spy();\n<span class=\"hljs-keyword\">var</span> contextMiddleware = middleware.context();\ncontextMiddleware(req, res, next);\nreq.context.should.eql({userId: <span class=\"hljs-literal\">null</span>});\nnext.called.should.equal(<span class=\"hljs-literal\">true</span>);",
            "isRoot": false,
            "uuid": "73de0994-9257-4218-9e88-d66ef4ffa92a",
            "parentUUID": "54f313e1-951e-4729-a0e4-eeffa0bcb017",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/middleware/context.js",
        "uuid": "54f313e1-951e-4729-a0e4-eeffa0bcb017",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi/test/unit/middleware/context.js",
        "passes": [
          "[Circular ~.suites.suites.13.tests.0]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Unit suite - The `user` middleware getter",
        "suites": [],
        "tests": [
          {
            "title": "should return a middleware function",
            "fullTitle": "Unit suite - The `user` middleware getter should return a middleware function",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> userMiddleware = middleware.user();\nuserMiddleware.should.be.of.type(<span class=\"hljs-string\">\"function\"</span>);\nuserMiddleware.length.should.equal(<span class=\"hljs-number\">3</span>);",
            "isRoot": false,
            "uuid": "e70dbbe6-d50e-4d57-b5ed-90071a2308b8",
            "parentUUID": "00881ca9-6258-445d-aaac-be10d5bd703f",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/middleware/user.js",
        "uuid": "00881ca9-6258-445d-aaac-be10d5bd703f",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi/test/unit/middleware/user.js",
        "passes": [
          "[Circular ~.suites.suites.14.tests.0]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Unit suite - The middleware function returned by the `user` middleware getter",
        "suites": [],
        "tests": [
          {
            "title": "should let the request through if it doesn't have a `loginToken`",
            "fullTitle": "Unit suite - The middleware function returned by the `user` middleware getter should let the request through if it doesn't have a `loginToken`",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> userMiddleware = middleware.user();\n<span class=\"hljs-keyword\">var</span> req = {body: {}};\n<span class=\"hljs-keyword\">var</span> res = {};\n<span class=\"hljs-keyword\">var</span> next = sinon.spy();\nuserMiddleware(req, res, next);\nnext.called.should.equal(<span class=\"hljs-literal\">true</span>);",
            "isRoot": false,
            "uuid": "7e00b32e-1f92-4813-be5e-890a9b285802",
            "parentUUID": "798b8445-6e58-4929-8b73-5e2d25e0c43d",
            "skipped": false
          },
          {
            "title": "should 401 if there's an invalid `loginToken` (which doesn't match any user)",
            "fullTitle": "Unit suite - The middleware function returned by the `user` middleware getter should 401 if there's an invalid `loginToken` (which doesn't match any user)",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> userMiddleware = middleware.user({\n    db: {\n        collection: R.always({\n            findOne: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(selector, cb)</span> </span>{\n                cb(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">undefined</span>);\n            }\n        })\n    }\n});\n<span class=\"hljs-keyword\">var</span> req = {\n    body: {\n        loginToken: <span class=\"hljs-string\">\"invalid\"</span>\n    }\n};\n<span class=\"hljs-keyword\">var</span> res = {\n    status: sinon.spy(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> res;\n    }),\n    send: sinon.spy(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">var</span> err;\n        <span class=\"hljs-keyword\">try</span> {\n            res.status.calledWith(<span class=\"hljs-number\">401</span>).should.equal(<span class=\"hljs-literal\">true</span>);\n            res.send.called.should.equal(<span class=\"hljs-literal\">true</span>);\n            res.send.calledWith({error: <span class=\"hljs-string\">\"Invalid loginToken\"</span>}).should.equal(<span class=\"hljs-literal\">true</span>);\n        } <span class=\"hljs-keyword\">catch</span> (e) {\n            err = e;\n        }\n        done(err);\n    })\n};\n<span class=\"hljs-keyword\">var</span> next = sinon.spy();\nuserMiddleware(req, res, next);",
            "isRoot": false,
            "uuid": "290db614-b98c-49aa-8dcf-f0c4f6a5206e",
            "parentUUID": "798b8445-6e58-4929-8b73-5e2d25e0c43d",
            "skipped": false
          },
          {
            "title": "should let the request through and attach the user object to the context",
            "fullTitle": "Unit suite - The middleware function returned by the `user` middleware getter should let the request through and attach the user object to the context",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> userMiddleware = middleware.user({\n    db: {\n        collection: R.always({\n            findOne: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(selector, cb)</span> </span>{\n                cb(<span class=\"hljs-literal\">null</span>, {_id: <span class=\"hljs-string\">\"userId\"</span>});\n            }\n        })\n    }\n});\n<span class=\"hljs-keyword\">var</span> req = {\n    body: {\n        loginToken: <span class=\"hljs-string\">\"valid\"</span>\n    },\n    context: {}\n};\n<span class=\"hljs-keyword\">var</span> res = {};\n<span class=\"hljs-keyword\">var</span> next = sinon.spy(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">var</span> err;\n    <span class=\"hljs-keyword\">try</span> {\n        req.context.userId.should.equal(<span class=\"hljs-string\">\"userId\"</span>);\n        req.context.user.should.eql({_id: <span class=\"hljs-string\">\"userId\"</span>});\n        next.called.should.equal(<span class=\"hljs-literal\">true</span>);\n    } <span class=\"hljs-keyword\">catch</span> (e) {\n        err = e;\n    }\n    done(err);\n});\nuserMiddleware(req, res, next);",
            "isRoot": false,
            "uuid": "d6e6ee47-646b-401a-bbce-aaddc7025ac2",
            "parentUUID": "798b8445-6e58-4929-8b73-5e2d25e0c43d",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/middleware/user.js",
        "uuid": "798b8445-6e58-4929-8b73-5e2d25e0c43d",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi/test/unit/middleware/user.js",
        "passes": [
          "[Circular ~.suites.suites.15.tests.0]",
          "[Circular ~.suites.suites.15.tests.1]",
          "[Circular ~.suites.suites.15.tests.2]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 3,
        "totalPasses": 3,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 1
      },
      {
        "title": "Integration suite - Bad requests",
        "suites": [],
        "tests": [
          {
            "title": "the server should reply a 400 on malformed body",
            "fullTitle": "Integration suite - Bad requests the server should reply a 400 on malformed body",
            "timedOut": false,
            "duration": 28,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> mw = <span class=\"hljs-keyword\">new</span> MW(db);\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({unexpectedProp: <span class=\"hljs-string\">\"unexpectedValue\"</span>})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">400</span>);",
            "isRoot": false,
            "uuid": "cb4437bf-3f99-4e78-a571-5fa31fc3054e",
            "parentUUID": "f587a75b-0e95-4a41-af4f-23fc9c58fbfa",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/integration/bad-requests.js",
        "uuid": "f587a75b-0e95-4a41-af4f-23fc9c58fbfa",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi/test/integration/bad-requests.js",
        "passes": [
          "[Circular ~.suites.suites.16.tests.0]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 28
      },
      {
        "title": "Integration suite - Methods",
        "suites": [],
        "tests": [
          {
            "title": "that do not exist",
            "fullTitle": "Integration suite - Methods that do not exist",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> mw = <span class=\"hljs-keyword\">new</span> MW(db);\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"nonexistentMethod\"</span>, params: []})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">404</span>)\n    .expect({error: <span class=\"hljs-string\">\"Method not found\"</span>});",
            "isRoot": false,
            "uuid": "acc381c0-7069-4910-91ad-34c8b3e1fa42",
            "parentUUID": "d2b71811-33f3-47fd-9cd7-357a2cb89746",
            "skipped": false
          },
          {
            "title": "that return undefined",
            "fullTitle": "Integration suite - Methods that return undefined",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> mw = <span class=\"hljs-keyword\">new</span> MW(db);\nmw.methods({\n    <span class=\"hljs-string\">\"return:value\"</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"return:value\"</span>, params: []})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">200</span>)\n    .expect({result: <span class=\"hljs-literal\">null</span>});",
            "isRoot": false,
            "uuid": "2fa4805a-9846-4df5-b6d0-bb5bb83cdfcf",
            "parentUUID": "d2b71811-33f3-47fd-9cd7-357a2cb89746",
            "skipped": false
          },
          {
            "title": "that return a value",
            "fullTitle": "Integration suite - Methods that return a value",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> mw = <span class=\"hljs-keyword\">new</span> MW(db);\nmw.methods({\n    <span class=\"hljs-string\">\"return:value\"</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"return:value\"</span>;\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"return:value\"</span>, params: []})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">200</span>)\n    .expect({result: <span class=\"hljs-string\">\"return:value\"</span>});",
            "isRoot": false,
            "uuid": "58dd0e65-586b-4479-b403-2568a21b3eff",
            "parentUUID": "d2b71811-33f3-47fd-9cd7-357a2cb89746",
            "skipped": false
          },
          {
            "title": "that throw a MW.Error",
            "fullTitle": "Integration suite - Methods that throw a MW.Error",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> mw = <span class=\"hljs-keyword\">new</span> MW(db);\nmw.methods({\n    <span class=\"hljs-string\">\"throw:mw-error\"</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">499</span>, <span class=\"hljs-string\">\"MW.Error\"</span>);\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"throw:mw-error\"</span>, params: []})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">499</span>)\n    .expect({error: <span class=\"hljs-string\">\"MW.Error\"</span>});",
            "isRoot": false,
            "uuid": "ad774abd-8b75-44d8-85a9-cb1ddb99a88a",
            "parentUUID": "d2b71811-33f3-47fd-9cd7-357a2cb89746",
            "skipped": false
          },
          {
            "title": "that throw a generic error",
            "fullTitle": "Integration suite - Methods that throw a generic error",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> mw = <span class=\"hljs-keyword\">new</span> MW(db);\nmw.methods({\n    <span class=\"hljs-string\">\"throw:generic-error\"</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">\"Generic error\"</span>);\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"throw:generic-error\"</span>, params: []})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">500</span>)\n    .expect({error: <span class=\"hljs-string\">\"Internal server error\"</span>});",
            "isRoot": false,
            "uuid": "73aa628c-f5ef-4144-a39b-8d40370d5d5d",
            "parentUUID": "d2b71811-33f3-47fd-9cd7-357a2cb89746",
            "skipped": false
          },
          {
            "title": "that return a promise which is eventually resolved",
            "fullTitle": "Integration suite - Methods that return a promise which is eventually resolved",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> mw = <span class=\"hljs-keyword\">new</span> MW(db);\nmw.methods({\n    <span class=\"hljs-string\">\"return:promise:resolved\"</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> BPromise(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(resolve, reject)</span> </span>{\n            setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n                resolve(<span class=\"hljs-string\">\"return:promise:resolved\"</span>);\n            }, <span class=\"hljs-number\">10</span>);\n        });\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"return:promise:resolved\"</span>, params: []})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">200</span>)\n    .expect({result: <span class=\"hljs-string\">\"return:promise:resolved\"</span>});",
            "isRoot": false,
            "uuid": "5bb3b89d-c7c7-4f2e-8b45-767bf540905d",
            "parentUUID": "d2b71811-33f3-47fd-9cd7-357a2cb89746",
            "skipped": false
          },
          {
            "title": "that return a promise which is eventually rejected with an MW.Error",
            "fullTitle": "Integration suite - Methods that return a promise which is eventually rejected with an MW.Error",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> mw = <span class=\"hljs-keyword\">new</span> MW(db);\nmw.methods({\n    <span class=\"hljs-string\">\"return:promise:rejected:mw-error\"</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> BPromise(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(resolve, reject)</span> </span>{\n            setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n                reject(<span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">499</span>, <span class=\"hljs-string\">\"MW.Error\"</span>));\n            }, <span class=\"hljs-number\">10</span>);\n        });\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"return:promise:rejected:mw-error\"</span>, params: []})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">499</span>)\n    .expect({error: <span class=\"hljs-string\">\"MW.Error\"</span>});",
            "isRoot": false,
            "uuid": "dc9bd7b5-e0d1-4f06-8b6c-594da745ed93",
            "parentUUID": "d2b71811-33f3-47fd-9cd7-357a2cb89746",
            "skipped": false
          },
          {
            "title": "that return a promise which is eventually rejected with a generic error",
            "fullTitle": "Integration suite - Methods that return a promise which is eventually rejected with a generic error",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> mw = <span class=\"hljs-keyword\">new</span> MW(db);\nmw.methods({\n    <span class=\"hljs-string\">\"return:promise:rejected:generic-error\"</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> BPromise(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(resolve, reject)</span> </span>{\n            setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n                reject(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">\"Generic error\"</span>));\n            }, <span class=\"hljs-number\">10</span>);\n        });\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"return:promise:rejected:generic-error\"</span>, params: []})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">500</span>)\n    .expect({error: <span class=\"hljs-string\">\"Internal server error\"</span>});",
            "isRoot": false,
            "uuid": "debe1d73-5850-488d-83df-dbb64da4ef9a",
            "parentUUID": "d2b71811-33f3-47fd-9cd7-357a2cb89746",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/integration/methods.js",
        "uuid": "d2b71811-33f3-47fd-9cd7-357a2cb89746",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi/test/integration/methods.js",
        "passes": [
          "[Circular ~.suites.suites.17.tests.0]",
          "[Circular ~.suites.suites.17.tests.1]",
          "[Circular ~.suites.suites.17.tests.2]",
          "[Circular ~.suites.suites.17.tests.3]",
          "[Circular ~.suites.suites.17.tests.4]",
          "[Circular ~.suites.suites.17.tests.5]",
          "[Circular ~.suites.suites.17.tests.6]",
          "[Circular ~.suites.suites.17.tests.7]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 8,
        "totalPasses": 8,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 74
      },
      {
        "title": "Integration suite - User auth",
        "suites": [],
        "tests": [
          {
            "title": "the server should auth the user if the loginToken is valid",
            "fullTitle": "Integration suite - User auth the server should auth the user if the loginToken is valid",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> mw = <span class=\"hljs-keyword\">new</span> MW(db);\nmw.methods({\n    getUserId: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.userId;\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"getUserId\"</span>, params: [], loginToken: <span class=\"hljs-string\">\"loginToken\"</span>})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">200</span>)\n    .expect({result: <span class=\"hljs-string\">\"userId\"</span>});",
            "isRoot": false,
            "uuid": "daffb090-cd0f-4c59-a95b-f6b2fb963342",
            "parentUUID": "ce31001f-2daa-407c-8d38-4755d4e1cb30",
            "skipped": false
          },
          {
            "title": "if the user is authenticated, methods should have available `this.userId` and `this.user`",
            "fullTitle": "Integration suite - User auth if the user is authenticated, methods should have available `this.userId` and `this.user`",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "db.collection(<span class=\"hljs-string\">\"users\"</span>).findOne({_id: <span class=\"hljs-string\">\"userId\"</span>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(err, user)</span> </span>{\n    <span class=\"hljs-comment\">// Stringify and parse to convert the Date object at `services.resume.loginTokens.when`</span>\n    user = <span class=\"hljs-built_in\">JSON</span>.parse(<span class=\"hljs-built_in\">JSON</span>.stringify(user));\n    <span class=\"hljs-keyword\">var</span> mw = <span class=\"hljs-keyword\">new</span> MW(db);\n    mw.methods({\n        getUserIdAndUser: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n            <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-keyword\">this</span>.userId, <span class=\"hljs-keyword\">this</span>.user];\n        }\n    });\n    <span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n    <span class=\"hljs-keyword\">return</span> request(app)\n        .post(<span class=\"hljs-string\">\"/\"</span>)\n        .send({method: <span class=\"hljs-string\">\"getUserIdAndUser\"</span>, params: [], loginToken: <span class=\"hljs-string\">\"loginToken\"</span>})\n        .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n        .expect(<span class=\"hljs-number\">200</span>)\n        .expect({result: [<span class=\"hljs-string\">\"userId\"</span>, user]});\n});",
            "isRoot": false,
            "uuid": "83502695-e60a-4a8c-8105-54484ff2c232",
            "parentUUID": "ce31001f-2daa-407c-8d38-4755d4e1cb30",
            "skipped": false
          },
          {
            "title": "the server should reply 403 if the loginToken is invalid",
            "fullTitle": "Integration suite - User auth the server should reply 403 if the loginToken is invalid",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> mw = <span class=\"hljs-keyword\">new</span> MW(db);\nmw.methods({\n    getUserId: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.userId;\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"getUserId\"</span>, params: [], loginToken: <span class=\"hljs-string\">\"invalidLoginToken\"</span>})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">401</span>)\n    .expect({error: <span class=\"hljs-string\">\"Invalid loginToken\"</span>});",
            "isRoot": false,
            "uuid": "a5d542ef-5cf9-42e8-807f-0e81eabdee87",
            "parentUUID": "ce31001f-2daa-407c-8d38-4755d4e1cb30",
            "skipped": false
          },
          {
            "title": "the server should let requests without loginToken through",
            "fullTitle": "Integration suite - User auth the server should let requests without loginToken through",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> mw = <span class=\"hljs-keyword\">new</span> MW(db);\nmw.methods({\n    getUserId: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.userId;\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"getUserId\"</span>, params: []})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">200</span>)\n    .expect({result: <span class=\"hljs-literal\">null</span>});",
            "isRoot": false,
            "uuid": "c2ccc59f-b386-4baa-ac62-ae3ec89e8cb1",
            "parentUUID": "ce31001f-2daa-407c-8d38-4755d4e1cb30",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/integration/user-auth.js",
        "uuid": "ce31001f-2daa-407c-8d38-4755d4e1cb30",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi/test/integration/user-auth.js",
        "passes": [
          "[Circular ~.suites.suites.18.tests.0]",
          "[Circular ~.suites.suites.18.tests.1]",
          "[Circular ~.suites.suites.18.tests.2]",
          "[Circular ~.suites.suites.18.tests.3]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 4,
        "totalPasses": 4,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 16
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "a476c6f6-896f-4e60-9e12-e85d398d1de4",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "should send the custom error if it's an instance of MWError",
      "fullTitle": "Unit suite - The `errorHandler` function should send the custom error if it's an instance of MWError",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> res = getResponse();\nerrorHandler(res, <span class=\"hljs-keyword\">new</span> MWError(<span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">\"Message\"</span>));\nres.status.calledWith(<span class=\"hljs-number\">400</span>).should.equal(<span class=\"hljs-literal\">true</span>);\nres.send.calledWith({error: <span class=\"hljs-string\">\"Message\"</span>}).should.equal(<span class=\"hljs-literal\">true</span>);",
      "isRoot": false,
      "uuid": "d5d766a3-eeaf-4c4a-9e82-dc4accbb1367",
      "parentUUID": "99064b0c-6b14-4c08-9c93-aac780568449",
      "skipped": false
    },
    {
      "title": "should send a 500 if the error is not an instance of MWError",
      "fullTitle": "Unit suite - The `errorHandler` function should send a 500 if the error is not an instance of MWError",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> res = getResponse();\nerrorHandler(res, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">\"Message\"</span>));\nres.status.calledWith(<span class=\"hljs-number\">500</span>).should.equal(<span class=\"hljs-literal\">true</span>);\nres.send.calledWith({error: <span class=\"hljs-string\">\"Internal server error\"</span>}).should.equal(<span class=\"hljs-literal\">true</span>);",
      "isRoot": false,
      "uuid": "3610c290-1670-475b-ab62-759addb28175",
      "parentUUID": "99064b0c-6b14-4c08-9c93-aac780568449",
      "skipped": false
    },
    {
      "title": "should log an error if the error is not an instance of MWError",
      "fullTitle": "Unit suite - The `errorHandler` function should log an error if the error is not an instance of MWError",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> error = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">\"Message\"</span>);\n<span class=\"hljs-keyword\">var</span> res = getResponse();\nerrorHandler(res, error);\n<span class=\"hljs-built_in\">console</span>.error.calledWith(error).should.equal(<span class=\"hljs-literal\">true</span>);",
      "isRoot": false,
      "uuid": "05e4eced-f2ba-4be3-a24d-ce3d277b2b21",
      "parentUUID": "99064b0c-6b14-4c08-9c93-aac780568449",
      "skipped": false
    },
    {
      "title": "should get the last valid date from now",
      "fullTitle": "Unit suite - The `getLastValidDate` function should get the last valid date from now",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> EIGHTYNINE_DAYS_AGO_IN_MS = <span class=\"hljs-built_in\">Date</span>.now() - (<span class=\"hljs-number\">89</span> * <span class=\"hljs-number\">24</span> * <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">1000</span>);\n<span class=\"hljs-keyword\">var</span> ret = getLastValidDate();\n(ret.getTime() &lt; EIGHTYNINE_DAYS_AGO_IN_MS).should.equal(<span class=\"hljs-literal\">true</span>);",
      "isRoot": false,
      "uuid": "ee9e7b13-1655-4a09-ad9f-c8aaf4fdae14",
      "parentUUID": "c323325a-1b71-449d-bfa8-a8afa4b1a495",
      "skipped": false
    },
    {
      "title": "should return a thenable",
      "fullTitle": "Unit suite - The `getUserFromToken` function should return a thenable",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> mwInstance = {\n    db: {\n        collection: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n            <span class=\"hljs-keyword\">return</span> {\n                findOne: R.always(<span class=\"hljs-literal\">null</span>)\n            };\n        }\n    }\n};\n<span class=\"hljs-keyword\">var</span> ret = getUserFromToken(mwInstance, <span class=\"hljs-string\">\"loginToken\"</span>);\nret.then.should.be.of.type(<span class=\"hljs-string\">\"function\"</span>);",
      "isRoot": false,
      "uuid": "26c3c0a5-d7f9-40be-84d7-3906d317d176",
      "parentUUID": "2dcdb20b-aba8-42cb-a0d1-f36705746b54",
      "skipped": false
    },
    {
      "title": "should hash with sha256 the passed in string and return it as a base64 string",
      "fullTitle": "Unit suite - The `hashLoginToken` function should hash with sha256 the passed in string and return it as a base64 string",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ret = hashLoginToken(<span class=\"hljs-string\">\"hello\"</span>);\nret.should.equal(<span class=\"hljs-string\">\"LPJNul+wow4m6DsqxbninhsWHlwfp0JecwQzYpOLmCQ=\"</span>);",
      "isRoot": false,
      "uuid": "faee8435-fab1-4837-9826-694d7e9e5c08",
      "parentUUID": "ad7d3aad-5cf9-4d76-a04d-9e794a637496",
      "skipped": false
    },
    {
      "title": "should send the provided response with a 200 HTTP code",
      "fullTitle": "Unit suite - The `resultHandler` function should send the provided response with a 200 HTTP code",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> res_0 = getResponse();\n        resultHandler(res_0, {});\n        res_0.status.calledWith(<span class=\"hljs-number\">200</span>).should.equal(<span class=\"hljs-literal\">true</span>);\n        res_0.send.calledWith({result: {}}).should.equal(<span class=\"hljs-literal\">true</span>);\n        <span class=\"hljs-keyword\">var</span> res_1 = getResponse();\n        resultHandler(res_1, <span class=\"hljs-literal\">undefined</span>);\n        res_1.status.calledWith(<span class=\"hljs-number\">200</span>).should.equal(<span class=\"hljs-literal\">true</span>);\n        res_1.send.calledWith({result: <span class=\"hljs-literal\">null</span>}).should.equal(<span class=\"hljs-literal\">true</span>);",
      "isRoot": false,
      "uuid": "4ff7d4d4-ce38-446d-80b8-85930b983edf",
      "parentUUID": "cfea5496-72f2-4fac-b615-ed38ea9b6e73",
      "skipped": false
    },
    {
      "title": "should return a thenable",
      "fullTitle": "Unit suite - The `_runMethod` method should return a thenable",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ret = methods._runMethod({}, <span class=\"hljs-string\">\"\"</span>, []);\nret.catch(R.identity);\nret.then.should.be.of.type(<span class=\"hljs-string\">\"function\"</span>);",
      "isRoot": false,
      "uuid": "4ef43909-c269-49c9-a20a-a77adb9d4e95",
      "parentUUID": "86b5c403-e0ff-4d50-8559-7f5ba4fd9c20",
      "skipped": false
    },
    {
      "title": "should actually call the method",
      "fullTitle": "Unit suite - The `_runMethod` method should actually call the method",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    _methods: {\n        method: {\n            fn: sinon.spy(),\n            context: {}\n        }\n    }\n};\nmethods._runMethod.call(ctx, {}, <span class=\"hljs-string\">\"method\"</span>, [])\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">try</span> {\n            ctx._methods.method.fn.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        } <span class=\"hljs-keyword\">catch</span> (e) {\n            <span class=\"hljs-keyword\">return</span> done(e);\n        }\n        done();\n    })\n    .catch(done);",
      "isRoot": false,
      "uuid": "aef4429d-6994-4fc7-9779-f53627ee24d2",
      "parentUUID": "86b5c403-e0ff-4d50-8559-7f5ba4fd9c20",
      "skipped": false
    },
    {
      "title": "should call the method with the additional context we provide when registering it",
      "fullTitle": "Unit suite - The `_runMethod` method should call the method with the additional context we provide when registering it",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    _methods: {\n        method: {\n            fn: sinon.spy(),\n            context: {\n                prop: <span class=\"hljs-string\">\"value\"</span>\n            }\n        }\n    }\n};\nmethods._runMethod.call(ctx, {userId: <span class=\"hljs-literal\">null</span>}, <span class=\"hljs-string\">\"method\"</span>, [])\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">try</span> {\n            ctx._methods.method.fn.firstCall.thisValue.should.eql({\n                userId: <span class=\"hljs-literal\">null</span>,\n                prop: <span class=\"hljs-string\">\"value\"</span>\n            });\n        } <span class=\"hljs-keyword\">catch</span> (e) {\n            <span class=\"hljs-keyword\">return</span> done(e);\n        }\n        done();\n    })\n    .catch(done);",
      "isRoot": false,
      "uuid": "4de29632-eca7-44fa-b41f-222f4e8576d1",
      "parentUUID": "86b5c403-e0ff-4d50-8559-7f5ba4fd9c20",
      "skipped": false
    },
    {
      "title": "should be rejected if the method does not exist",
      "fullTitle": "Unit suite - The promise returned by `_runMethod` should be rejected if the method does not exist",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    _methods: {}\n};\nmethods._runMethod.call(ctx, {}, <span class=\"hljs-string\">\"method\"</span>, [])\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        done(<span class=\"hljs-string\">\"The promise should have been rejected\"</span>);\n    })\n    .catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(err)</span> </span>{\n        <span class=\"hljs-keyword\">try</span> {\n            err.code.should.equal(<span class=\"hljs-number\">404</span>);\n            err.message.should.equal(<span class=\"hljs-string\">\"Method not found\"</span>);\n        } <span class=\"hljs-keyword\">catch</span> (e) {\n            <span class=\"hljs-keyword\">return</span> done(e);\n        }\n        done();\n    });",
      "isRoot": false,
      "uuid": "bc9eab51-4e26-4a13-89ef-a467cc64b965",
      "parentUUID": "1dcaa722-084c-4e96-8b21-0cf3a70281e0",
      "skipped": false
    },
    {
      "title": "should be rejected if the method throws",
      "fullTitle": "Unit suite - The promise returned by `_runMethod` should be rejected if the method throws",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> error = {};\n<span class=\"hljs-keyword\">var</span> ctx = {\n    _methods: {\n        method: {\n            fn: sinon.stub().throws(error),\n            context: {}\n        }\n    }\n};\nmethods._runMethod.call(ctx, {}, <span class=\"hljs-string\">\"method\"</span>, [])\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        done(<span class=\"hljs-string\">\"The promise should have been rejected\"</span>);\n    })\n    .catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(err)</span> </span>{\n        <span class=\"hljs-keyword\">try</span> {\n            err.should.equal(error);\n        } <span class=\"hljs-keyword\">catch</span> (e) {\n            <span class=\"hljs-keyword\">return</span> done(e);\n        }\n        done();\n    });",
      "isRoot": false,
      "uuid": "cb9e0168-1f8a-4a12-8a70-290244fcaf28",
      "parentUUID": "1dcaa722-084c-4e96-8b21-0cf3a70281e0",
      "skipped": false
    },
    {
      "title": "should be resolved with the value returned by the method",
      "fullTitle": "Unit suite - The promise returned by `_runMethod` should be resolved with the value returned by the method",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> value = {};\n<span class=\"hljs-keyword\">var</span> ctx = {\n    _methods: {\n        method: {\n            fn: sinon.stub().returns(value),\n            context: {}\n        }\n    }\n};\nmethods._runMethod.call(ctx, {}, <span class=\"hljs-string\">\"method\"</span>, [])\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(val)</span> </span>{\n        <span class=\"hljs-keyword\">try</span> {\n            val.should.equal(value);\n        } <span class=\"hljs-keyword\">catch</span> (e) {\n            <span class=\"hljs-keyword\">return</span> done(e);\n        }\n        done();\n    })\n    .catch(done);",
      "isRoot": false,
      "uuid": "3bf7ca55-8025-4d23-b7ec-50bc763646d4",
      "parentUUID": "1dcaa722-084c-4e96-8b21-0cf3a70281e0",
      "skipped": false
    },
    {
      "title": "should return an express.Router",
      "fullTitle": "Unit suite - The `getRouter` method should return an express.Router",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-comment\">/*\n*   express routers are not instances of any class, therefore we can't\n*   use `instanceOf` for this test. Instead we test it against the\n*   current implementation, where a router is a function which has,\n*   according to its API, a `use` property (which is a function too).\n*/</span>\n<span class=\"hljs-keyword\">var</span> router = methods.getRouter();\nrouter.should.be.of.type(<span class=\"hljs-string\">\"function\"</span>);\nrouter.use.should.be.of.type(<span class=\"hljs-string\">\"function\"</span>);",
      "isRoot": false,
      "uuid": "123ce28d-1be2-42fd-b50e-e4a00972b6bf",
      "parentUUID": "dd6cc818-b27b-4581-ab19-f7d4aae2a02f",
      "skipped": false
    },
    {
      "title": "should call the `_runMethod` method",
      "fullTitle": "Unit suite - The function returned by `getRouter` should call the `_runMethod` method",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    _runMethod: sinon.spy(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> BPromise(R.identity);\n    })\n};\n<span class=\"hljs-keyword\">var</span> route = methods.getRouter.call(ctx);\n<span class=\"hljs-comment\">/*\n*   Mock the request \"only as much as needed\" to make it pass through\n*   the router. We accept this poor compromise since this part is also\n*   thoroughly tested with integration tests.\n*/</span>\n<span class=\"hljs-keyword\">var</span> req = {\n    url: <span class=\"hljs-string\">\"/\"</span>,\n    method: <span class=\"hljs-string\">\"POST\"</span>,\n    context: {},\n    <span class=\"hljs-comment\">/*\n    *   If the bodyParser middleware finds a _body property on the\n    *   request, it lets it through.\n    */</span>\n    _body: <span class=\"hljs-string\">\"notUndefined\"</span>,\n    body: {\n        method: <span class=\"hljs-string\">\"method\"</span>,\n        params: []\n    }\n};\n<span class=\"hljs-keyword\">var</span> res = {};\n<span class=\"hljs-keyword\">var</span> next = R.identity;\nroute(req, res, next);\nctx._runMethod.calledWith(req.context, req.body.method, req.body.params).should.equal(<span class=\"hljs-literal\">true</span>);",
      "isRoot": false,
      "uuid": "21de7750-dceb-4051-89fa-63843d57100b",
      "parentUUID": "0741a1b3-4fab-4338-95d8-55803fd11f72",
      "skipped": false
    },
    {
      "title": "should register methods",
      "fullTitle": "Unit suite - The `methods` method should register methods",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    _methods: {}\n};\n<span class=\"hljs-keyword\">var</span> optionalContext = {};\nmethods.methods.call(ctx, {\n    name: R.identity\n}, optionalContext);\nctx._methods.name.fn.should.equal(R.identity);\nctx._methods.name.context.should.equal(optionalContext);",
      "isRoot": false,
      "uuid": "59a54c45-b712-4391-95fa-fa9f6b878141",
      "parentUUID": "cb26a5db-737d-4f86-8d3a-bf571966f812",
      "skipped": false
    },
    {
      "title": "should type-check its arguments (throwing in case of mismatches)",
      "fullTitle": "Unit suite - The `methods` method should type-check its arguments (throwing in case of mismatches)",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    _methods: {}\n};\n<span class=\"hljs-keyword\">var</span> troublemaker_0 = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n    methods.methods.call(ctx, {\n        name: <span class=\"hljs-string\">\"notAFunction\"</span>\n    });\n};\ntroublemaker_0.should.throw();\n<span class=\"hljs-keyword\">var</span> troublemaker_1 = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n    methods.methods.call(ctx, {\n        name: R.identity\n    }, <span class=\"hljs-string\">\"notAnObject\"</span>);\n};\ntroublemaker_1.should.throw();",
      "isRoot": false,
      "uuid": "19487197-a5ee-430a-98da-d4e6b694002a",
      "parentUUID": "cb26a5db-737d-4f86-8d3a-bf571966f812",
      "skipped": false
    },
    {
      "title": "should return a middleware function",
      "fullTitle": "Unit suite - The `bodyValidation` middleware getter should return a middleware function",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> bodyValidationMiddleware = middleware.bodyValidation();\nbodyValidationMiddleware.should.be.of.type(<span class=\"hljs-string\">\"function\"</span>);\nbodyValidationMiddleware.length.should.equal(<span class=\"hljs-number\">3</span>);",
      "isRoot": false,
      "uuid": "d1d9814b-9c3a-4cc2-9b44-0dc5e38e3a6f",
      "parentUUID": "32d89507-85ee-4240-811e-524876991191",
      "skipped": false
    },
    {
      "title": "should stop the request with an error if the body is malformed",
      "fullTitle": "Unit suite - The middleware function returned by the `bodyValidation` middleware getter should stop the request with an error if the body is malformed",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> req = {\n    body: <span class=\"hljs-string\">\"malformed body\"</span>\n};\n<span class=\"hljs-keyword\">var</span> res = {\n    status: sinon.spy(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> res;\n    }),\n    send: sinon.spy()\n};\n<span class=\"hljs-keyword\">var</span> next = sinon.spy();\n<span class=\"hljs-keyword\">var</span> bodyValidationMiddleware = middleware.bodyValidation();\nbodyValidationMiddleware(req, res, next);\nres.status.called.should.equal(<span class=\"hljs-literal\">true</span>);\nres.send.called.should.equal(<span class=\"hljs-literal\">true</span>);",
      "isRoot": false,
      "uuid": "f27122dd-dc2c-456f-8366-9c8309d5a053",
      "parentUUID": "4e52d0a9-c818-4fe8-b6d8-c93360364376",
      "skipped": false
    },
    {
      "title": "should let the request through if the body is well-formed",
      "fullTitle": "Unit suite - The middleware function returned by the `bodyValidation` middleware getter should let the request through if the body is well-formed",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> req = {\n    body: {\n        method: <span class=\"hljs-string\">\"method\"</span>,\n        params: []\n    }\n};\n<span class=\"hljs-keyword\">var</span> res = {};\n<span class=\"hljs-keyword\">var</span> next = sinon.spy();\n<span class=\"hljs-keyword\">var</span> bodyValidationMiddleware = middleware.bodyValidation();\nbodyValidationMiddleware(req, res, next);\nnext.called.should.equal(<span class=\"hljs-literal\">true</span>);",
      "isRoot": false,
      "uuid": "84aaf5d2-50a8-47ba-8069-8baef26ff934",
      "parentUUID": "4e52d0a9-c818-4fe8-b6d8-c93360364376",
      "skipped": false
    },
    {
      "title": "should return a middleware function",
      "fullTitle": "Unit suite - The `context` middleware getter should return a middleware function",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> contextMiddleware = middleware.context();\ncontextMiddleware.should.be.of.type(<span class=\"hljs-string\">\"function\"</span>);\ncontextMiddleware.length.should.equal(<span class=\"hljs-number\">3</span>);",
      "isRoot": false,
      "uuid": "7d450309-6b0f-4dbf-96aa-70e1b82be8b2",
      "parentUUID": "ccb44edc-9444-4e0a-b1c6-20fe483595f4",
      "skipped": false
    },
    {
      "title": "should attach a default context to the request",
      "fullTitle": "Unit suite - The middleware function returned by the `context` middleware getter should attach a default context to the request",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> req = {};\n<span class=\"hljs-keyword\">var</span> res = {};\n<span class=\"hljs-keyword\">var</span> next = sinon.spy();\n<span class=\"hljs-keyword\">var</span> contextMiddleware = middleware.context();\ncontextMiddleware(req, res, next);\nreq.context.should.eql({userId: <span class=\"hljs-literal\">null</span>});\nnext.called.should.equal(<span class=\"hljs-literal\">true</span>);",
      "isRoot": false,
      "uuid": "6aceb58d-2362-4e92-8b64-20c49fbe302e",
      "parentUUID": "54f313e1-951e-4729-a0e4-eeffa0bcb017",
      "skipped": false
    },
    {
      "title": "should return a middleware function",
      "fullTitle": "Unit suite - The `user` middleware getter should return a middleware function",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> userMiddleware = middleware.user();\nuserMiddleware.should.be.of.type(<span class=\"hljs-string\">\"function\"</span>);\nuserMiddleware.length.should.equal(<span class=\"hljs-number\">3</span>);",
      "isRoot": false,
      "uuid": "12d8952e-e92a-4bce-b423-2a03c9e2ec10",
      "parentUUID": "00881ca9-6258-445d-aaac-be10d5bd703f",
      "skipped": false
    },
    {
      "title": "should let the request through if it doesn't have a `loginToken`",
      "fullTitle": "Unit suite - The middleware function returned by the `user` middleware getter should let the request through if it doesn't have a `loginToken`",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> userMiddleware = middleware.user();\n<span class=\"hljs-keyword\">var</span> req = {body: {}};\n<span class=\"hljs-keyword\">var</span> res = {};\n<span class=\"hljs-keyword\">var</span> next = sinon.spy();\nuserMiddleware(req, res, next);\nnext.called.should.equal(<span class=\"hljs-literal\">true</span>);",
      "isRoot": false,
      "uuid": "702847ce-de15-4911-9eee-5ece63e51c65",
      "parentUUID": "798b8445-6e58-4929-8b73-5e2d25e0c43d",
      "skipped": false
    },
    {
      "title": "should 401 if there's an invalid `loginToken` (which doesn't match any user)",
      "fullTitle": "Unit suite - The middleware function returned by the `user` middleware getter should 401 if there's an invalid `loginToken` (which doesn't match any user)",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> userMiddleware = middleware.user({\n    db: {\n        collection: R.always({\n            findOne: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(selector, cb)</span> </span>{\n                cb(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">undefined</span>);\n            }\n        })\n    }\n});\n<span class=\"hljs-keyword\">var</span> req = {\n    body: {\n        loginToken: <span class=\"hljs-string\">\"invalid\"</span>\n    }\n};\n<span class=\"hljs-keyword\">var</span> res = {\n    status: sinon.spy(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> res;\n    }),\n    send: sinon.spy(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">var</span> err;\n        <span class=\"hljs-keyword\">try</span> {\n            res.status.calledWith(<span class=\"hljs-number\">401</span>).should.equal(<span class=\"hljs-literal\">true</span>);\n            res.send.called.should.equal(<span class=\"hljs-literal\">true</span>);\n            res.send.calledWith({error: <span class=\"hljs-string\">\"Invalid loginToken\"</span>}).should.equal(<span class=\"hljs-literal\">true</span>);\n        } <span class=\"hljs-keyword\">catch</span> (e) {\n            err = e;\n        }\n        done(err);\n    })\n};\n<span class=\"hljs-keyword\">var</span> next = sinon.spy();\nuserMiddleware(req, res, next);",
      "isRoot": false,
      "uuid": "594cce52-e7e1-4504-90c2-4e31be66b584",
      "parentUUID": "798b8445-6e58-4929-8b73-5e2d25e0c43d",
      "skipped": false
    },
    {
      "title": "should let the request through and attach the user object to the context",
      "fullTitle": "Unit suite - The middleware function returned by the `user` middleware getter should let the request through and attach the user object to the context",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> userMiddleware = middleware.user({\n    db: {\n        collection: R.always({\n            findOne: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(selector, cb)</span> </span>{\n                cb(<span class=\"hljs-literal\">null</span>, {_id: <span class=\"hljs-string\">\"userId\"</span>});\n            }\n        })\n    }\n});\n<span class=\"hljs-keyword\">var</span> req = {\n    body: {\n        loginToken: <span class=\"hljs-string\">\"valid\"</span>\n    },\n    context: {}\n};\n<span class=\"hljs-keyword\">var</span> res = {};\n<span class=\"hljs-keyword\">var</span> next = sinon.spy(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">var</span> err;\n    <span class=\"hljs-keyword\">try</span> {\n        req.context.userId.should.equal(<span class=\"hljs-string\">\"userId\"</span>);\n        req.context.user.should.eql({_id: <span class=\"hljs-string\">\"userId\"</span>});\n        next.called.should.equal(<span class=\"hljs-literal\">true</span>);\n    } <span class=\"hljs-keyword\">catch</span> (e) {\n        err = e;\n    }\n    done(err);\n});\nuserMiddleware(req, res, next);",
      "isRoot": false,
      "uuid": "d3715691-8099-461b-b535-b038d42d2e83",
      "parentUUID": "798b8445-6e58-4929-8b73-5e2d25e0c43d",
      "skipped": false
    },
    {
      "title": "the server should reply a 400 on malformed body",
      "fullTitle": "Integration suite - Bad requests the server should reply a 400 on malformed body",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> mw = <span class=\"hljs-keyword\">new</span> MW(db);\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({unexpectedProp: <span class=\"hljs-string\">\"unexpectedValue\"</span>})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">400</span>);",
      "isRoot": false,
      "uuid": "402a5c01-1a6e-4fe1-bfe0-b16c32c22058",
      "parentUUID": "f587a75b-0e95-4a41-af4f-23fc9c58fbfa",
      "skipped": false
    },
    {
      "title": "that do not exist",
      "fullTitle": "Integration suite - Methods that do not exist",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> mw = <span class=\"hljs-keyword\">new</span> MW(db);\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"nonexistentMethod\"</span>, params: []})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">404</span>)\n    .expect({error: <span class=\"hljs-string\">\"Method not found\"</span>});",
      "isRoot": false,
      "uuid": "2545a7bb-b999-4064-a243-a02b694e439a",
      "parentUUID": "d2b71811-33f3-47fd-9cd7-357a2cb89746",
      "skipped": false
    },
    {
      "title": "that return undefined",
      "fullTitle": "Integration suite - Methods that return undefined",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> mw = <span class=\"hljs-keyword\">new</span> MW(db);\nmw.methods({\n    <span class=\"hljs-string\">\"return:value\"</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"return:value\"</span>, params: []})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">200</span>)\n    .expect({result: <span class=\"hljs-literal\">null</span>});",
      "isRoot": false,
      "uuid": "5c5fcaa6-f708-4c11-9ad3-abfdb83a37c6",
      "parentUUID": "d2b71811-33f3-47fd-9cd7-357a2cb89746",
      "skipped": false
    },
    {
      "title": "that return a value",
      "fullTitle": "Integration suite - Methods that return a value",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> mw = <span class=\"hljs-keyword\">new</span> MW(db);\nmw.methods({\n    <span class=\"hljs-string\">\"return:value\"</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"return:value\"</span>;\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"return:value\"</span>, params: []})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">200</span>)\n    .expect({result: <span class=\"hljs-string\">\"return:value\"</span>});",
      "isRoot": false,
      "uuid": "8d0c6b7b-f596-4280-91c1-d0e5a049bac2",
      "parentUUID": "d2b71811-33f3-47fd-9cd7-357a2cb89746",
      "skipped": false
    },
    {
      "title": "that throw a MW.Error",
      "fullTitle": "Integration suite - Methods that throw a MW.Error",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> mw = <span class=\"hljs-keyword\">new</span> MW(db);\nmw.methods({\n    <span class=\"hljs-string\">\"throw:mw-error\"</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">499</span>, <span class=\"hljs-string\">\"MW.Error\"</span>);\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"throw:mw-error\"</span>, params: []})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">499</span>)\n    .expect({error: <span class=\"hljs-string\">\"MW.Error\"</span>});",
      "isRoot": false,
      "uuid": "d19f25c7-4146-48e5-90ba-59a0f1c65f7b",
      "parentUUID": "d2b71811-33f3-47fd-9cd7-357a2cb89746",
      "skipped": false
    },
    {
      "title": "that throw a generic error",
      "fullTitle": "Integration suite - Methods that throw a generic error",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> mw = <span class=\"hljs-keyword\">new</span> MW(db);\nmw.methods({\n    <span class=\"hljs-string\">\"throw:generic-error\"</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">\"Generic error\"</span>);\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"throw:generic-error\"</span>, params: []})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">500</span>)\n    .expect({error: <span class=\"hljs-string\">\"Internal server error\"</span>});",
      "isRoot": false,
      "uuid": "3a92ef28-030a-4312-b81d-4d9f1eb63686",
      "parentUUID": "d2b71811-33f3-47fd-9cd7-357a2cb89746",
      "skipped": false
    },
    {
      "title": "that return a promise which is eventually resolved",
      "fullTitle": "Integration suite - Methods that return a promise which is eventually resolved",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> mw = <span class=\"hljs-keyword\">new</span> MW(db);\nmw.methods({\n    <span class=\"hljs-string\">\"return:promise:resolved\"</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> BPromise(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(resolve, reject)</span> </span>{\n            setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n                resolve(<span class=\"hljs-string\">\"return:promise:resolved\"</span>);\n            }, <span class=\"hljs-number\">10</span>);\n        });\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"return:promise:resolved\"</span>, params: []})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">200</span>)\n    .expect({result: <span class=\"hljs-string\">\"return:promise:resolved\"</span>});",
      "isRoot": false,
      "uuid": "11a3079b-b4d8-4eab-907d-ea1e8e14d973",
      "parentUUID": "d2b71811-33f3-47fd-9cd7-357a2cb89746",
      "skipped": false
    },
    {
      "title": "that return a promise which is eventually rejected with an MW.Error",
      "fullTitle": "Integration suite - Methods that return a promise which is eventually rejected with an MW.Error",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> mw = <span class=\"hljs-keyword\">new</span> MW(db);\nmw.methods({\n    <span class=\"hljs-string\">\"return:promise:rejected:mw-error\"</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> BPromise(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(resolve, reject)</span> </span>{\n            setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n                reject(<span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">499</span>, <span class=\"hljs-string\">\"MW.Error\"</span>));\n            }, <span class=\"hljs-number\">10</span>);\n        });\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"return:promise:rejected:mw-error\"</span>, params: []})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">499</span>)\n    .expect({error: <span class=\"hljs-string\">\"MW.Error\"</span>});",
      "isRoot": false,
      "uuid": "3795bf25-272f-4191-ab9b-f0a53cef4615",
      "parentUUID": "d2b71811-33f3-47fd-9cd7-357a2cb89746",
      "skipped": false
    },
    {
      "title": "that return a promise which is eventually rejected with a generic error",
      "fullTitle": "Integration suite - Methods that return a promise which is eventually rejected with a generic error",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> mw = <span class=\"hljs-keyword\">new</span> MW(db);\nmw.methods({\n    <span class=\"hljs-string\">\"return:promise:rejected:generic-error\"</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> BPromise(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(resolve, reject)</span> </span>{\n            setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n                reject(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">\"Generic error\"</span>));\n            }, <span class=\"hljs-number\">10</span>);\n        });\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"return:promise:rejected:generic-error\"</span>, params: []})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">500</span>)\n    .expect({error: <span class=\"hljs-string\">\"Internal server error\"</span>});",
      "isRoot": false,
      "uuid": "2337bb75-4fd4-44be-81a3-bb12ac17ae62",
      "parentUUID": "d2b71811-33f3-47fd-9cd7-357a2cb89746",
      "skipped": false
    },
    {
      "title": "the server should auth the user if the loginToken is valid",
      "fullTitle": "Integration suite - User auth the server should auth the user if the loginToken is valid",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> mw = <span class=\"hljs-keyword\">new</span> MW(db);\nmw.methods({\n    getUserId: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.userId;\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"getUserId\"</span>, params: [], loginToken: <span class=\"hljs-string\">\"loginToken\"</span>})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">200</span>)\n    .expect({result: <span class=\"hljs-string\">\"userId\"</span>});",
      "isRoot": false,
      "uuid": "c8d1ebff-6298-4f54-8816-bae5be1310a9",
      "parentUUID": "ce31001f-2daa-407c-8d38-4755d4e1cb30",
      "skipped": false
    },
    {
      "title": "if the user is authenticated, methods should have available `this.userId` and `this.user`",
      "fullTitle": "Integration suite - User auth if the user is authenticated, methods should have available `this.userId` and `this.user`",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "db.collection(<span class=\"hljs-string\">\"users\"</span>).findOne({_id: <span class=\"hljs-string\">\"userId\"</span>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(err, user)</span> </span>{\n    <span class=\"hljs-comment\">// Stringify and parse to convert the Date object at `services.resume.loginTokens.when`</span>\n    user = <span class=\"hljs-built_in\">JSON</span>.parse(<span class=\"hljs-built_in\">JSON</span>.stringify(user));\n    <span class=\"hljs-keyword\">var</span> mw = <span class=\"hljs-keyword\">new</span> MW(db);\n    mw.methods({\n        getUserIdAndUser: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n            <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-keyword\">this</span>.userId, <span class=\"hljs-keyword\">this</span>.user];\n        }\n    });\n    <span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n    <span class=\"hljs-keyword\">return</span> request(app)\n        .post(<span class=\"hljs-string\">\"/\"</span>)\n        .send({method: <span class=\"hljs-string\">\"getUserIdAndUser\"</span>, params: [], loginToken: <span class=\"hljs-string\">\"loginToken\"</span>})\n        .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n        .expect(<span class=\"hljs-number\">200</span>)\n        .expect({result: [<span class=\"hljs-string\">\"userId\"</span>, user]});\n});",
      "isRoot": false,
      "uuid": "a4051344-679b-4da0-adb0-106b5e04148d",
      "parentUUID": "ce31001f-2daa-407c-8d38-4755d4e1cb30",
      "skipped": false
    },
    {
      "title": "the server should reply 403 if the loginToken is invalid",
      "fullTitle": "Integration suite - User auth the server should reply 403 if the loginToken is invalid",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> mw = <span class=\"hljs-keyword\">new</span> MW(db);\nmw.methods({\n    getUserId: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.userId;\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"getUserId\"</span>, params: [], loginToken: <span class=\"hljs-string\">\"invalidLoginToken\"</span>})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">401</span>)\n    .expect({error: <span class=\"hljs-string\">\"Invalid loginToken\"</span>});",
      "isRoot": false,
      "uuid": "140e0c34-ab08-48cb-94c6-e1821783cbfa",
      "parentUUID": "ce31001f-2daa-407c-8d38-4755d4e1cb30",
      "skipped": false
    },
    {
      "title": "the server should let requests without loginToken through",
      "fullTitle": "Integration suite - User auth the server should let requests without loginToken through",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> mw = <span class=\"hljs-keyword\">new</span> MW(db);\nmw.methods({\n    getUserId: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.userId;\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"getUserId\"</span>, params: []})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">200</span>)\n    .expect({result: <span class=\"hljs-literal\">null</span>});",
      "isRoot": false,
      "uuid": "2b243b69-964f-499e-ad18-317d1ab69e5c",
      "parentUUID": "ce31001f-2daa-407c-8d38-4755d4e1cb30",
      "skipped": false
    }
  ],
  "allHooks": [
    {
      "title": "\"before all\" hook",
      "async": 0,
      "sync": true,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": "[Circular ~.suites.suites.0]",
      "ctx": {
        "_runnable": {
          "title": "\"after all\" hook",
          "async": 0,
          "sync": true,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "type": "hook",
          "parent": "[Circular ~.suites.suites.0]",
          "ctx": "[Circular ~.allHooks.0.ctx]",
          "_events": {},
          "_eventsCount": 0,
          "duration": 0,
          "_error": null
        },
        "test": "[Circular ~.allHooks.0.ctx._runnable]"
      },
      "_events": {},
      "_eventsCount": 0,
      "duration": 1,
      "_error": null
    },
    "[Circular ~.allHooks.0.ctx._runnable]",
    {
      "title": "\"before all\" hook",
      "async": 0,
      "sync": true,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": "[Circular ~.suites.suites.16]",
      "ctx": {
        "_runnable": {
          "title": "\"after all\" hook",
          "async": 0,
          "sync": true,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "type": "hook",
          "parent": "[Circular ~.suites.suites.16]",
          "ctx": "[Circular ~.allHooks.2.ctx]",
          "_events": {},
          "_eventsCount": 0,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 102880910,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 2,
          "_error": null
        },
        "test": "[Circular ~.allHooks.2.ctx._runnable]"
      },
      "_events": {},
      "_eventsCount": 0,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 102880645,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 234,
      "_error": null
    },
    "[Circular ~.allHooks.2.ctx._runnable]",
    {
      "title": "\"before all\" hook",
      "async": 0,
      "sync": true,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": "[Circular ~.suites.suites.17]",
      "ctx": {
        "_runnable": {
          "title": "\"after all\" hook",
          "async": 0,
          "sync": true,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "type": "hook",
          "parent": "[Circular ~.suites.suites.17]",
          "ctx": "[Circular ~.allHooks.4.ctx]",
          "_events": {},
          "_eventsCount": 0,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 102881210,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 2,
          "_error": null
        },
        "test": "[Circular ~.allHooks.4.ctx._runnable]"
      },
      "_events": {},
      "_eventsCount": 0,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 102880913,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 222,
      "_error": null
    },
    "[Circular ~.allHooks.4.ctx._runnable]",
    {
      "title": "\"before all\" hook",
      "async": 0,
      "sync": true,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": "[Circular ~.suites.suites.18]",
      "ctx": {
        "_runnable": {
          "title": "\"after all\" hook",
          "async": 0,
          "sync": true,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "type": "hook",
          "parent": "[Circular ~.suites.suites.18]",
          "ctx": "[Circular ~.allHooks.6.ctx]",
          "_events": {},
          "_eventsCount": 0,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 102881446,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 2,
          "_error": null
        },
        "test": "[Circular ~.allHooks.6.ctx._runnable]"
      },
      "_events": {},
      "_eventsCount": 0,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 102881214,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 216,
      "_error": null
    },
    "[Circular ~.allHooks.6.ctx._runnable]"
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "should send the custom error if it's an instance of MWError",
      "fullTitle": "Unit suite - The `errorHandler` function should send the custom error if it's an instance of MWError",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> res = getResponse();\nerrorHandler(res, <span class=\"hljs-keyword\">new</span> MWError(<span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">\"Message\"</span>));\nres.status.calledWith(<span class=\"hljs-number\">400</span>).should.equal(<span class=\"hljs-literal\">true</span>);\nres.send.calledWith({error: <span class=\"hljs-string\">\"Message\"</span>}).should.equal(<span class=\"hljs-literal\">true</span>);",
      "isRoot": false,
      "uuid": "b95e5522-9a50-4118-99e4-e09f3800daf8",
      "parentUUID": "99064b0c-6b14-4c08-9c93-aac780568449",
      "skipped": false
    },
    {
      "title": "should send a 500 if the error is not an instance of MWError",
      "fullTitle": "Unit suite - The `errorHandler` function should send a 500 if the error is not an instance of MWError",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> res = getResponse();\nerrorHandler(res, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">\"Message\"</span>));\nres.status.calledWith(<span class=\"hljs-number\">500</span>).should.equal(<span class=\"hljs-literal\">true</span>);\nres.send.calledWith({error: <span class=\"hljs-string\">\"Internal server error\"</span>}).should.equal(<span class=\"hljs-literal\">true</span>);",
      "isRoot": false,
      "uuid": "ec17a7b5-ec8f-48fc-8ad5-09e2896c41db",
      "parentUUID": "99064b0c-6b14-4c08-9c93-aac780568449",
      "skipped": false
    },
    {
      "title": "should log an error if the error is not an instance of MWError",
      "fullTitle": "Unit suite - The `errorHandler` function should log an error if the error is not an instance of MWError",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> error = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">\"Message\"</span>);\n<span class=\"hljs-keyword\">var</span> res = getResponse();\nerrorHandler(res, error);\n<span class=\"hljs-built_in\">console</span>.error.calledWith(error).should.equal(<span class=\"hljs-literal\">true</span>);",
      "isRoot": false,
      "uuid": "820c1d3a-8c7e-4822-baae-edb16c77674b",
      "parentUUID": "99064b0c-6b14-4c08-9c93-aac780568449",
      "skipped": false
    },
    {
      "title": "should get the last valid date from now",
      "fullTitle": "Unit suite - The `getLastValidDate` function should get the last valid date from now",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> EIGHTYNINE_DAYS_AGO_IN_MS = <span class=\"hljs-built_in\">Date</span>.now() - (<span class=\"hljs-number\">89</span> * <span class=\"hljs-number\">24</span> * <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">1000</span>);\n<span class=\"hljs-keyword\">var</span> ret = getLastValidDate();\n(ret.getTime() &lt; EIGHTYNINE_DAYS_AGO_IN_MS).should.equal(<span class=\"hljs-literal\">true</span>);",
      "isRoot": false,
      "uuid": "b81d35c1-d6f3-4497-8973-df67bdfc81c5",
      "parentUUID": "c323325a-1b71-449d-bfa8-a8afa4b1a495",
      "skipped": false
    },
    {
      "title": "should return a thenable",
      "fullTitle": "Unit suite - The `getUserFromToken` function should return a thenable",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> mwInstance = {\n    db: {\n        collection: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n            <span class=\"hljs-keyword\">return</span> {\n                findOne: R.always(<span class=\"hljs-literal\">null</span>)\n            };\n        }\n    }\n};\n<span class=\"hljs-keyword\">var</span> ret = getUserFromToken(mwInstance, <span class=\"hljs-string\">\"loginToken\"</span>);\nret.then.should.be.of.type(<span class=\"hljs-string\">\"function\"</span>);",
      "isRoot": false,
      "uuid": "b13a0140-2b31-44fc-bf7b-d345134d34f8",
      "parentUUID": "2dcdb20b-aba8-42cb-a0d1-f36705746b54",
      "skipped": false
    },
    {
      "title": "should hash with sha256 the passed in string and return it as a base64 string",
      "fullTitle": "Unit suite - The `hashLoginToken` function should hash with sha256 the passed in string and return it as a base64 string",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ret = hashLoginToken(<span class=\"hljs-string\">\"hello\"</span>);\nret.should.equal(<span class=\"hljs-string\">\"LPJNul+wow4m6DsqxbninhsWHlwfp0JecwQzYpOLmCQ=\"</span>);",
      "isRoot": false,
      "uuid": "99928df1-3b5c-4e9c-a556-d85df4a7f88d",
      "parentUUID": "ad7d3aad-5cf9-4d76-a04d-9e794a637496",
      "skipped": false
    },
    {
      "title": "should send the provided response with a 200 HTTP code",
      "fullTitle": "Unit suite - The `resultHandler` function should send the provided response with a 200 HTTP code",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> res_0 = getResponse();\n        resultHandler(res_0, {});\n        res_0.status.calledWith(<span class=\"hljs-number\">200</span>).should.equal(<span class=\"hljs-literal\">true</span>);\n        res_0.send.calledWith({result: {}}).should.equal(<span class=\"hljs-literal\">true</span>);\n        <span class=\"hljs-keyword\">var</span> res_1 = getResponse();\n        resultHandler(res_1, <span class=\"hljs-literal\">undefined</span>);\n        res_1.status.calledWith(<span class=\"hljs-number\">200</span>).should.equal(<span class=\"hljs-literal\">true</span>);\n        res_1.send.calledWith({result: <span class=\"hljs-literal\">null</span>}).should.equal(<span class=\"hljs-literal\">true</span>);",
      "isRoot": false,
      "uuid": "185461ea-965c-4c62-b688-431520c1f48f",
      "parentUUID": "cfea5496-72f2-4fac-b615-ed38ea9b6e73",
      "skipped": false
    },
    {
      "title": "should return a thenable",
      "fullTitle": "Unit suite - The `_runMethod` method should return a thenable",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ret = methods._runMethod({}, <span class=\"hljs-string\">\"\"</span>, []);\nret.catch(R.identity);\nret.then.should.be.of.type(<span class=\"hljs-string\">\"function\"</span>);",
      "isRoot": false,
      "uuid": "6283b198-2370-4829-b8f8-320079a8f2cc",
      "parentUUID": "86b5c403-e0ff-4d50-8559-7f5ba4fd9c20",
      "skipped": false
    },
    {
      "title": "should actually call the method",
      "fullTitle": "Unit suite - The `_runMethod` method should actually call the method",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    _methods: {\n        method: {\n            fn: sinon.spy(),\n            context: {}\n        }\n    }\n};\nmethods._runMethod.call(ctx, {}, <span class=\"hljs-string\">\"method\"</span>, [])\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">try</span> {\n            ctx._methods.method.fn.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        } <span class=\"hljs-keyword\">catch</span> (e) {\n            <span class=\"hljs-keyword\">return</span> done(e);\n        }\n        done();\n    })\n    .catch(done);",
      "isRoot": false,
      "uuid": "cab5093c-e38e-407a-a7b1-0418191e5a8b",
      "parentUUID": "86b5c403-e0ff-4d50-8559-7f5ba4fd9c20",
      "skipped": false
    },
    {
      "title": "should call the method with the additional context we provide when registering it",
      "fullTitle": "Unit suite - The `_runMethod` method should call the method with the additional context we provide when registering it",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    _methods: {\n        method: {\n            fn: sinon.spy(),\n            context: {\n                prop: <span class=\"hljs-string\">\"value\"</span>\n            }\n        }\n    }\n};\nmethods._runMethod.call(ctx, {userId: <span class=\"hljs-literal\">null</span>}, <span class=\"hljs-string\">\"method\"</span>, [])\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">try</span> {\n            ctx._methods.method.fn.firstCall.thisValue.should.eql({\n                userId: <span class=\"hljs-literal\">null</span>,\n                prop: <span class=\"hljs-string\">\"value\"</span>\n            });\n        } <span class=\"hljs-keyword\">catch</span> (e) {\n            <span class=\"hljs-keyword\">return</span> done(e);\n        }\n        done();\n    })\n    .catch(done);",
      "isRoot": false,
      "uuid": "78cc4783-326e-48f8-99c5-ed202a744c38",
      "parentUUID": "86b5c403-e0ff-4d50-8559-7f5ba4fd9c20",
      "skipped": false
    },
    {
      "title": "should be rejected if the method does not exist",
      "fullTitle": "Unit suite - The promise returned by `_runMethod` should be rejected if the method does not exist",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    _methods: {}\n};\nmethods._runMethod.call(ctx, {}, <span class=\"hljs-string\">\"method\"</span>, [])\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        done(<span class=\"hljs-string\">\"The promise should have been rejected\"</span>);\n    })\n    .catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(err)</span> </span>{\n        <span class=\"hljs-keyword\">try</span> {\n            err.code.should.equal(<span class=\"hljs-number\">404</span>);\n            err.message.should.equal(<span class=\"hljs-string\">\"Method not found\"</span>);\n        } <span class=\"hljs-keyword\">catch</span> (e) {\n            <span class=\"hljs-keyword\">return</span> done(e);\n        }\n        done();\n    });",
      "isRoot": false,
      "uuid": "d5b4b701-e43c-4fd6-869f-ca7b4ff0b4a7",
      "parentUUID": "1dcaa722-084c-4e96-8b21-0cf3a70281e0",
      "skipped": false
    },
    {
      "title": "should be rejected if the method throws",
      "fullTitle": "Unit suite - The promise returned by `_runMethod` should be rejected if the method throws",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> error = {};\n<span class=\"hljs-keyword\">var</span> ctx = {\n    _methods: {\n        method: {\n            fn: sinon.stub().throws(error),\n            context: {}\n        }\n    }\n};\nmethods._runMethod.call(ctx, {}, <span class=\"hljs-string\">\"method\"</span>, [])\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        done(<span class=\"hljs-string\">\"The promise should have been rejected\"</span>);\n    })\n    .catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(err)</span> </span>{\n        <span class=\"hljs-keyword\">try</span> {\n            err.should.equal(error);\n        } <span class=\"hljs-keyword\">catch</span> (e) {\n            <span class=\"hljs-keyword\">return</span> done(e);\n        }\n        done();\n    });",
      "isRoot": false,
      "uuid": "635a6669-2a4a-475b-b73e-212b659e7ba7",
      "parentUUID": "1dcaa722-084c-4e96-8b21-0cf3a70281e0",
      "skipped": false
    },
    {
      "title": "should be resolved with the value returned by the method",
      "fullTitle": "Unit suite - The promise returned by `_runMethod` should be resolved with the value returned by the method",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> value = {};\n<span class=\"hljs-keyword\">var</span> ctx = {\n    _methods: {\n        method: {\n            fn: sinon.stub().returns(value),\n            context: {}\n        }\n    }\n};\nmethods._runMethod.call(ctx, {}, <span class=\"hljs-string\">\"method\"</span>, [])\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(val)</span> </span>{\n        <span class=\"hljs-keyword\">try</span> {\n            val.should.equal(value);\n        } <span class=\"hljs-keyword\">catch</span> (e) {\n            <span class=\"hljs-keyword\">return</span> done(e);\n        }\n        done();\n    })\n    .catch(done);",
      "isRoot": false,
      "uuid": "85eab7a4-e659-45fe-a1c3-161dbfff87c9",
      "parentUUID": "1dcaa722-084c-4e96-8b21-0cf3a70281e0",
      "skipped": false
    },
    {
      "title": "should return an express.Router",
      "fullTitle": "Unit suite - The `getRouter` method should return an express.Router",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-comment\">/*\n*   express routers are not instances of any class, therefore we can't\n*   use `instanceOf` for this test. Instead we test it against the\n*   current implementation, where a router is a function which has,\n*   according to its API, a `use` property (which is a function too).\n*/</span>\n<span class=\"hljs-keyword\">var</span> router = methods.getRouter();\nrouter.should.be.of.type(<span class=\"hljs-string\">\"function\"</span>);\nrouter.use.should.be.of.type(<span class=\"hljs-string\">\"function\"</span>);",
      "isRoot": false,
      "uuid": "b1c3028a-dd63-4d10-89b4-0e35062080a4",
      "parentUUID": "dd6cc818-b27b-4581-ab19-f7d4aae2a02f",
      "skipped": false
    },
    {
      "title": "should call the `_runMethod` method",
      "fullTitle": "Unit suite - The function returned by `getRouter` should call the `_runMethod` method",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    _runMethod: sinon.spy(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> BPromise(R.identity);\n    })\n};\n<span class=\"hljs-keyword\">var</span> route = methods.getRouter.call(ctx);\n<span class=\"hljs-comment\">/*\n*   Mock the request \"only as much as needed\" to make it pass through\n*   the router. We accept this poor compromise since this part is also\n*   thoroughly tested with integration tests.\n*/</span>\n<span class=\"hljs-keyword\">var</span> req = {\n    url: <span class=\"hljs-string\">\"/\"</span>,\n    method: <span class=\"hljs-string\">\"POST\"</span>,\n    context: {},\n    <span class=\"hljs-comment\">/*\n    *   If the bodyParser middleware finds a _body property on the\n    *   request, it lets it through.\n    */</span>\n    _body: <span class=\"hljs-string\">\"notUndefined\"</span>,\n    body: {\n        method: <span class=\"hljs-string\">\"method\"</span>,\n        params: []\n    }\n};\n<span class=\"hljs-keyword\">var</span> res = {};\n<span class=\"hljs-keyword\">var</span> next = R.identity;\nroute(req, res, next);\nctx._runMethod.calledWith(req.context, req.body.method, req.body.params).should.equal(<span class=\"hljs-literal\">true</span>);",
      "isRoot": false,
      "uuid": "05e898bd-1d0c-4134-87ca-7770742298eb",
      "parentUUID": "0741a1b3-4fab-4338-95d8-55803fd11f72",
      "skipped": false
    },
    {
      "title": "should register methods",
      "fullTitle": "Unit suite - The `methods` method should register methods",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    _methods: {}\n};\n<span class=\"hljs-keyword\">var</span> optionalContext = {};\nmethods.methods.call(ctx, {\n    name: R.identity\n}, optionalContext);\nctx._methods.name.fn.should.equal(R.identity);\nctx._methods.name.context.should.equal(optionalContext);",
      "isRoot": false,
      "uuid": "f7d340ea-bef3-4068-bf50-d2f296fdeede",
      "parentUUID": "cb26a5db-737d-4f86-8d3a-bf571966f812",
      "skipped": false
    },
    {
      "title": "should type-check its arguments (throwing in case of mismatches)",
      "fullTitle": "Unit suite - The `methods` method should type-check its arguments (throwing in case of mismatches)",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ctx = {\n    _methods: {}\n};\n<span class=\"hljs-keyword\">var</span> troublemaker_0 = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n    methods.methods.call(ctx, {\n        name: <span class=\"hljs-string\">\"notAFunction\"</span>\n    });\n};\ntroublemaker_0.should.throw();\n<span class=\"hljs-keyword\">var</span> troublemaker_1 = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n    methods.methods.call(ctx, {\n        name: R.identity\n    }, <span class=\"hljs-string\">\"notAnObject\"</span>);\n};\ntroublemaker_1.should.throw();",
      "isRoot": false,
      "uuid": "ee8f1121-aa77-4318-ab05-2331e4e0d1b5",
      "parentUUID": "cb26a5db-737d-4f86-8d3a-bf571966f812",
      "skipped": false
    },
    {
      "title": "should return a middleware function",
      "fullTitle": "Unit suite - The `bodyValidation` middleware getter should return a middleware function",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> bodyValidationMiddleware = middleware.bodyValidation();\nbodyValidationMiddleware.should.be.of.type(<span class=\"hljs-string\">\"function\"</span>);\nbodyValidationMiddleware.length.should.equal(<span class=\"hljs-number\">3</span>);",
      "isRoot": false,
      "uuid": "da805253-46f8-416b-a57d-daf27aca2d13",
      "parentUUID": "32d89507-85ee-4240-811e-524876991191",
      "skipped": false
    },
    {
      "title": "should stop the request with an error if the body is malformed",
      "fullTitle": "Unit suite - The middleware function returned by the `bodyValidation` middleware getter should stop the request with an error if the body is malformed",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> req = {\n    body: <span class=\"hljs-string\">\"malformed body\"</span>\n};\n<span class=\"hljs-keyword\">var</span> res = {\n    status: sinon.spy(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> res;\n    }),\n    send: sinon.spy()\n};\n<span class=\"hljs-keyword\">var</span> next = sinon.spy();\n<span class=\"hljs-keyword\">var</span> bodyValidationMiddleware = middleware.bodyValidation();\nbodyValidationMiddleware(req, res, next);\nres.status.called.should.equal(<span class=\"hljs-literal\">true</span>);\nres.send.called.should.equal(<span class=\"hljs-literal\">true</span>);",
      "isRoot": false,
      "uuid": "c6f226ce-6d65-4afd-a872-e24c1fc0e11a",
      "parentUUID": "4e52d0a9-c818-4fe8-b6d8-c93360364376",
      "skipped": false
    },
    {
      "title": "should let the request through if the body is well-formed",
      "fullTitle": "Unit suite - The middleware function returned by the `bodyValidation` middleware getter should let the request through if the body is well-formed",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> req = {\n    body: {\n        method: <span class=\"hljs-string\">\"method\"</span>,\n        params: []\n    }\n};\n<span class=\"hljs-keyword\">var</span> res = {};\n<span class=\"hljs-keyword\">var</span> next = sinon.spy();\n<span class=\"hljs-keyword\">var</span> bodyValidationMiddleware = middleware.bodyValidation();\nbodyValidationMiddleware(req, res, next);\nnext.called.should.equal(<span class=\"hljs-literal\">true</span>);",
      "isRoot": false,
      "uuid": "647dd527-641a-4b62-8059-efcda3dee8f1",
      "parentUUID": "4e52d0a9-c818-4fe8-b6d8-c93360364376",
      "skipped": false
    },
    {
      "title": "should return a middleware function",
      "fullTitle": "Unit suite - The `context` middleware getter should return a middleware function",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> contextMiddleware = middleware.context();\ncontextMiddleware.should.be.of.type(<span class=\"hljs-string\">\"function\"</span>);\ncontextMiddleware.length.should.equal(<span class=\"hljs-number\">3</span>);",
      "isRoot": false,
      "uuid": "7b33579a-0acb-4f5d-a404-28e14d6507c9",
      "parentUUID": "ccb44edc-9444-4e0a-b1c6-20fe483595f4",
      "skipped": false
    },
    {
      "title": "should attach a default context to the request",
      "fullTitle": "Unit suite - The middleware function returned by the `context` middleware getter should attach a default context to the request",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> req = {};\n<span class=\"hljs-keyword\">var</span> res = {};\n<span class=\"hljs-keyword\">var</span> next = sinon.spy();\n<span class=\"hljs-keyword\">var</span> contextMiddleware = middleware.context();\ncontextMiddleware(req, res, next);\nreq.context.should.eql({userId: <span class=\"hljs-literal\">null</span>});\nnext.called.should.equal(<span class=\"hljs-literal\">true</span>);",
      "isRoot": false,
      "uuid": "ebdef388-87d7-4881-9ed4-bd32e259e69e",
      "parentUUID": "54f313e1-951e-4729-a0e4-eeffa0bcb017",
      "skipped": false
    },
    {
      "title": "should return a middleware function",
      "fullTitle": "Unit suite - The `user` middleware getter should return a middleware function",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> userMiddleware = middleware.user();\nuserMiddleware.should.be.of.type(<span class=\"hljs-string\">\"function\"</span>);\nuserMiddleware.length.should.equal(<span class=\"hljs-number\">3</span>);",
      "isRoot": false,
      "uuid": "5a75c938-9ef4-4588-8077-a546fd58569e",
      "parentUUID": "00881ca9-6258-445d-aaac-be10d5bd703f",
      "skipped": false
    },
    {
      "title": "should let the request through if it doesn't have a `loginToken`",
      "fullTitle": "Unit suite - The middleware function returned by the `user` middleware getter should let the request through if it doesn't have a `loginToken`",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> userMiddleware = middleware.user();\n<span class=\"hljs-keyword\">var</span> req = {body: {}};\n<span class=\"hljs-keyword\">var</span> res = {};\n<span class=\"hljs-keyword\">var</span> next = sinon.spy();\nuserMiddleware(req, res, next);\nnext.called.should.equal(<span class=\"hljs-literal\">true</span>);",
      "isRoot": false,
      "uuid": "e61263a0-8952-4928-9af4-de3cf83b6ce6",
      "parentUUID": "798b8445-6e58-4929-8b73-5e2d25e0c43d",
      "skipped": false
    },
    {
      "title": "should 401 if there's an invalid `loginToken` (which doesn't match any user)",
      "fullTitle": "Unit suite - The middleware function returned by the `user` middleware getter should 401 if there's an invalid `loginToken` (which doesn't match any user)",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> userMiddleware = middleware.user({\n    db: {\n        collection: R.always({\n            findOne: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(selector, cb)</span> </span>{\n                cb(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">undefined</span>);\n            }\n        })\n    }\n});\n<span class=\"hljs-keyword\">var</span> req = {\n    body: {\n        loginToken: <span class=\"hljs-string\">\"invalid\"</span>\n    }\n};\n<span class=\"hljs-keyword\">var</span> res = {\n    status: sinon.spy(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> res;\n    }),\n    send: sinon.spy(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">var</span> err;\n        <span class=\"hljs-keyword\">try</span> {\n            res.status.calledWith(<span class=\"hljs-number\">401</span>).should.equal(<span class=\"hljs-literal\">true</span>);\n            res.send.called.should.equal(<span class=\"hljs-literal\">true</span>);\n            res.send.calledWith({error: <span class=\"hljs-string\">\"Invalid loginToken\"</span>}).should.equal(<span class=\"hljs-literal\">true</span>);\n        } <span class=\"hljs-keyword\">catch</span> (e) {\n            err = e;\n        }\n        done(err);\n    })\n};\n<span class=\"hljs-keyword\">var</span> next = sinon.spy();\nuserMiddleware(req, res, next);",
      "isRoot": false,
      "uuid": "d7a2269b-03dc-484d-9649-bfdf22d67373",
      "parentUUID": "798b8445-6e58-4929-8b73-5e2d25e0c43d",
      "skipped": false
    },
    {
      "title": "should let the request through and attach the user object to the context",
      "fullTitle": "Unit suite - The middleware function returned by the `user` middleware getter should let the request through and attach the user object to the context",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> userMiddleware = middleware.user({\n    db: {\n        collection: R.always({\n            findOne: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(selector, cb)</span> </span>{\n                cb(<span class=\"hljs-literal\">null</span>, {_id: <span class=\"hljs-string\">\"userId\"</span>});\n            }\n        })\n    }\n});\n<span class=\"hljs-keyword\">var</span> req = {\n    body: {\n        loginToken: <span class=\"hljs-string\">\"valid\"</span>\n    },\n    context: {}\n};\n<span class=\"hljs-keyword\">var</span> res = {};\n<span class=\"hljs-keyword\">var</span> next = sinon.spy(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">var</span> err;\n    <span class=\"hljs-keyword\">try</span> {\n        req.context.userId.should.equal(<span class=\"hljs-string\">\"userId\"</span>);\n        req.context.user.should.eql({_id: <span class=\"hljs-string\">\"userId\"</span>});\n        next.called.should.equal(<span class=\"hljs-literal\">true</span>);\n    } <span class=\"hljs-keyword\">catch</span> (e) {\n        err = e;\n    }\n    done(err);\n});\nuserMiddleware(req, res, next);",
      "isRoot": false,
      "uuid": "2c1df84a-d72f-4326-a49f-4a3e40d5570a",
      "parentUUID": "798b8445-6e58-4929-8b73-5e2d25e0c43d",
      "skipped": false
    },
    {
      "title": "the server should reply a 400 on malformed body",
      "fullTitle": "Integration suite - Bad requests the server should reply a 400 on malformed body",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> mw = <span class=\"hljs-keyword\">new</span> MW(db);\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({unexpectedProp: <span class=\"hljs-string\">\"unexpectedValue\"</span>})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">400</span>);",
      "isRoot": false,
      "uuid": "4dd1854c-e0a0-4e41-b171-31e499a63585",
      "parentUUID": "f587a75b-0e95-4a41-af4f-23fc9c58fbfa",
      "skipped": false
    },
    {
      "title": "that do not exist",
      "fullTitle": "Integration suite - Methods that do not exist",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> mw = <span class=\"hljs-keyword\">new</span> MW(db);\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"nonexistentMethod\"</span>, params: []})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">404</span>)\n    .expect({error: <span class=\"hljs-string\">\"Method not found\"</span>});",
      "isRoot": false,
      "uuid": "07a58df9-d9fd-4bed-988b-01560a1cb27b",
      "parentUUID": "d2b71811-33f3-47fd-9cd7-357a2cb89746",
      "skipped": false
    },
    {
      "title": "that return undefined",
      "fullTitle": "Integration suite - Methods that return undefined",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> mw = <span class=\"hljs-keyword\">new</span> MW(db);\nmw.methods({\n    <span class=\"hljs-string\">\"return:value\"</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"return:value\"</span>, params: []})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">200</span>)\n    .expect({result: <span class=\"hljs-literal\">null</span>});",
      "isRoot": false,
      "uuid": "916e25ea-4af9-4ddb-b81d-408e183d01dc",
      "parentUUID": "d2b71811-33f3-47fd-9cd7-357a2cb89746",
      "skipped": false
    },
    {
      "title": "that return a value",
      "fullTitle": "Integration suite - Methods that return a value",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> mw = <span class=\"hljs-keyword\">new</span> MW(db);\nmw.methods({\n    <span class=\"hljs-string\">\"return:value\"</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"return:value\"</span>;\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"return:value\"</span>, params: []})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">200</span>)\n    .expect({result: <span class=\"hljs-string\">\"return:value\"</span>});",
      "isRoot": false,
      "uuid": "9c9f90f5-7259-4620-8b29-6313b886746f",
      "parentUUID": "d2b71811-33f3-47fd-9cd7-357a2cb89746",
      "skipped": false
    },
    {
      "title": "that throw a MW.Error",
      "fullTitle": "Integration suite - Methods that throw a MW.Error",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> mw = <span class=\"hljs-keyword\">new</span> MW(db);\nmw.methods({\n    <span class=\"hljs-string\">\"throw:mw-error\"</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">499</span>, <span class=\"hljs-string\">\"MW.Error\"</span>);\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"throw:mw-error\"</span>, params: []})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">499</span>)\n    .expect({error: <span class=\"hljs-string\">\"MW.Error\"</span>});",
      "isRoot": false,
      "uuid": "0bd92da1-8181-4fad-9828-e9a92655fce7",
      "parentUUID": "d2b71811-33f3-47fd-9cd7-357a2cb89746",
      "skipped": false
    },
    {
      "title": "that throw a generic error",
      "fullTitle": "Integration suite - Methods that throw a generic error",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> mw = <span class=\"hljs-keyword\">new</span> MW(db);\nmw.methods({\n    <span class=\"hljs-string\">\"throw:generic-error\"</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">\"Generic error\"</span>);\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"throw:generic-error\"</span>, params: []})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">500</span>)\n    .expect({error: <span class=\"hljs-string\">\"Internal server error\"</span>});",
      "isRoot": false,
      "uuid": "586306c5-206f-468c-aacc-086ee99b109e",
      "parentUUID": "d2b71811-33f3-47fd-9cd7-357a2cb89746",
      "skipped": false
    },
    {
      "title": "that return a promise which is eventually resolved",
      "fullTitle": "Integration suite - Methods that return a promise which is eventually resolved",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> mw = <span class=\"hljs-keyword\">new</span> MW(db);\nmw.methods({\n    <span class=\"hljs-string\">\"return:promise:resolved\"</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> BPromise(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(resolve, reject)</span> </span>{\n            setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n                resolve(<span class=\"hljs-string\">\"return:promise:resolved\"</span>);\n            }, <span class=\"hljs-number\">10</span>);\n        });\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"return:promise:resolved\"</span>, params: []})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">200</span>)\n    .expect({result: <span class=\"hljs-string\">\"return:promise:resolved\"</span>});",
      "isRoot": false,
      "uuid": "bc752569-0f62-4277-91ea-0935c9fcb660",
      "parentUUID": "d2b71811-33f3-47fd-9cd7-357a2cb89746",
      "skipped": false
    },
    {
      "title": "that return a promise which is eventually rejected with an MW.Error",
      "fullTitle": "Integration suite - Methods that return a promise which is eventually rejected with an MW.Error",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> mw = <span class=\"hljs-keyword\">new</span> MW(db);\nmw.methods({\n    <span class=\"hljs-string\">\"return:promise:rejected:mw-error\"</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> BPromise(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(resolve, reject)</span> </span>{\n            setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n                reject(<span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">499</span>, <span class=\"hljs-string\">\"MW.Error\"</span>));\n            }, <span class=\"hljs-number\">10</span>);\n        });\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"return:promise:rejected:mw-error\"</span>, params: []})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">499</span>)\n    .expect({error: <span class=\"hljs-string\">\"MW.Error\"</span>});",
      "isRoot": false,
      "uuid": "c242cb60-2b10-4533-8cf7-279e4a3704ad",
      "parentUUID": "d2b71811-33f3-47fd-9cd7-357a2cb89746",
      "skipped": false
    },
    {
      "title": "that return a promise which is eventually rejected with a generic error",
      "fullTitle": "Integration suite - Methods that return a promise which is eventually rejected with a generic error",
      "timedOut": false,
      "duration": 17,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> mw = <span class=\"hljs-keyword\">new</span> MW(db);\nmw.methods({\n    <span class=\"hljs-string\">\"return:promise:rejected:generic-error\"</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> BPromise(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(resolve, reject)</span> </span>{\n            setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n                reject(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">\"Generic error\"</span>));\n            }, <span class=\"hljs-number\">10</span>);\n        });\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"return:promise:rejected:generic-error\"</span>, params: []})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">500</span>)\n    .expect({error: <span class=\"hljs-string\">\"Internal server error\"</span>});",
      "isRoot": false,
      "uuid": "dad83a9b-9ab0-45be-bd89-da65e4171694",
      "parentUUID": "d2b71811-33f3-47fd-9cd7-357a2cb89746",
      "skipped": false
    },
    {
      "title": "the server should auth the user if the loginToken is valid",
      "fullTitle": "Integration suite - User auth the server should auth the user if the loginToken is valid",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> mw = <span class=\"hljs-keyword\">new</span> MW(db);\nmw.methods({\n    getUserId: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.userId;\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"getUserId\"</span>, params: [], loginToken: <span class=\"hljs-string\">\"loginToken\"</span>})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">200</span>)\n    .expect({result: <span class=\"hljs-string\">\"userId\"</span>});",
      "isRoot": false,
      "uuid": "135a79c1-45af-4b60-9ce6-94e75a843414",
      "parentUUID": "ce31001f-2daa-407c-8d38-4755d4e1cb30",
      "skipped": false
    },
    {
      "title": "if the user is authenticated, methods should have available `this.userId` and `this.user`",
      "fullTitle": "Integration suite - User auth if the user is authenticated, methods should have available `this.userId` and `this.user`",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "db.collection(<span class=\"hljs-string\">\"users\"</span>).findOne({_id: <span class=\"hljs-string\">\"userId\"</span>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(err, user)</span> </span>{\n    <span class=\"hljs-comment\">// Stringify and parse to convert the Date object at `services.resume.loginTokens.when`</span>\n    user = <span class=\"hljs-built_in\">JSON</span>.parse(<span class=\"hljs-built_in\">JSON</span>.stringify(user));\n    <span class=\"hljs-keyword\">var</span> mw = <span class=\"hljs-keyword\">new</span> MW(db);\n    mw.methods({\n        getUserIdAndUser: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n            <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-keyword\">this</span>.userId, <span class=\"hljs-keyword\">this</span>.user];\n        }\n    });\n    <span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n    <span class=\"hljs-keyword\">return</span> request(app)\n        .post(<span class=\"hljs-string\">\"/\"</span>)\n        .send({method: <span class=\"hljs-string\">\"getUserIdAndUser\"</span>, params: [], loginToken: <span class=\"hljs-string\">\"loginToken\"</span>})\n        .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n        .expect(<span class=\"hljs-number\">200</span>)\n        .expect({result: [<span class=\"hljs-string\">\"userId\"</span>, user]});\n});",
      "isRoot": false,
      "uuid": "b86a0e26-2190-4333-bce9-a26569efcc05",
      "parentUUID": "ce31001f-2daa-407c-8d38-4755d4e1cb30",
      "skipped": false
    },
    {
      "title": "the server should reply 403 if the loginToken is invalid",
      "fullTitle": "Integration suite - User auth the server should reply 403 if the loginToken is invalid",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> mw = <span class=\"hljs-keyword\">new</span> MW(db);\nmw.methods({\n    getUserId: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.userId;\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"getUserId\"</span>, params: [], loginToken: <span class=\"hljs-string\">\"invalidLoginToken\"</span>})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">401</span>)\n    .expect({error: <span class=\"hljs-string\">\"Invalid loginToken\"</span>});",
      "isRoot": false,
      "uuid": "eac59e61-0754-4c27-84d6-23fa8a6be617",
      "parentUUID": "ce31001f-2daa-407c-8d38-4755d4e1cb30",
      "skipped": false
    },
    {
      "title": "the server should let requests without loginToken through",
      "fullTitle": "Integration suite - User auth the server should let requests without loginToken through",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> mw = <span class=\"hljs-keyword\">new</span> MW(db);\nmw.methods({\n    getUserId: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.userId;\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"getUserId\"</span>, params: []})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">200</span>)\n    .expect({result: <span class=\"hljs-literal\">null</span>});",
      "isRoot": false,
      "uuid": "9c34a56d-a690-4941-83d1-2856930a3307",
      "parentUUID": "ce31001f-2daa-407c-8d38-4755d4e1cb30",
      "skipped": false
    }
  ],
  "allFailures": []
}